(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{749:function(r,i,n){"use strict";n.r(i);var _=n(7),v=Object(_.a)({},(function(){var r=this,i=r.$createElement,n=r._self._c||i;return n("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"title"}),n("p",[r._v("这里介绍了Spring的一些基础知识，让我们对于Spring有一个大致的了解，后续再慢慢深入。")])]),r._v(" "),n("h2",{attrs:{id:"spring基础概况"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring基础概况"}},[r._v("#")]),r._v(" Spring基础概况")]),r._v(" "),n("blockquote",[n("p",[r._v("这个部分是学习Spring之前所了解的整体只是。")])]),r._v(" "),n("ul",[n("li",[n("p",[n("strong",[r._v("Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。")])])]),r._v(" "),n("li",[n("p",[n("strong",[r._v("Spring 框架是一个分层架构，由 7 个定义良好的模块组成")]),r._v("。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式 。组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：")]),r._v(" "),n("ul",[n("li",[n("strong",[r._v("核心容器")]),r._v("：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用控制反转（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。")]),r._v(" "),n("li",[n("strong",[r._v("Spring 上下文")]),r._v("：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。")]),r._v(" "),n("li",[n("strong",[r._v("Spring AOP")]),r._v("：通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。")]),r._v(" "),n("li",[n("strong",[r._v("Spring DAO")]),r._v("：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。")]),r._v(" "),n("li",[n("strong",[r._v("Spring ORM")]),r._v("：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。")]),r._v(" "),n("li",[n("strong",[r._v("Spring Web 模块")]),r._v("：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。")]),r._v(" "),n("li",[n("strong",[r._v("Spring MVC 框架")]),r._v("：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。")])])]),r._v(" "),n("li",[n("p",[n("strong",[r._v("SpringBoot和SpringCloud")])]),r._v(" "),n("ul",[n("li",[r._v("Spring Boot 是 Spring 的一套快速配置脚手架，可以基于Spring Boot 快速开发单个微服务;")]),r._v(" "),n("li",[r._v("Spring Cloud是基于Spring Boot实现的；")]),r._v(" "),n("li",[r._v("Spring Boot专注于快速、方便集成的单个微服务个体，Spring Cloud关注全局的服务治理框架；")]),r._v(" "),n("li",[r._v("Spring Boot使用了约束优于配置的理念，很多集成方案已经帮你选择好了，能不配置就不配置 , Spring Cloud很大的一部分是基于Spring Boot来实现，Spring Boot可以离开Spring Cloud独立使用开发项目，但是Spring Cloud离不开Spring Boot，属于依赖的关系。")]),r._v(" "),n("li",[r._v("SpringBoot在SpringClound中起到了承上启下的作用，如果你要学习SpringCloud必须要学习SpringBoot。")])])]),r._v(" "),n("li",[n("p",[n("strong",[r._v("IOC基础")])]),r._v(" "),n("ul",[n("li",[r._v("程序员不再去管理对象的创建了 , 更多的去关注业务的实现 . 耦合性大大降低 . 这也就是IOC的原型 !")]),r._v(" "),n("li",[n("strong",[r._v("控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法")]),r._v("，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。")]),r._v(" "),n("li",[n("strong",[r._v("IoC是Spring框架的核心内容")]),r._v("，使用多种方式完美的实现了IoC，可以使用XML配置，也可以使用注解，新版本的Spring也可以零配置实现IoC。")]),r._v(" "),n("li",[n("strong",[r._v("控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。")])]),r._v(" "),n("li",[r._v("控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是由Spring来创建的。反转 : 程序本身不创建对象 , 而变成被动的接收对象 .")]),r._v(" "),n("li",[r._v("IOC是一种编程思想，由主动的编程变成被动的接收")]),r._v(" "),n("li",[r._v("IOC一句话解释就是： "),n("strong",[r._v("对象由Spring 来创建 , 管理 , 装配 !")])]),r._v(" "),n("li",[n("strong",[r._v("IOC创建对象方式")]),r._v("：①无参构造器；②有参构造器。")])])]),r._v(" "),n("li",[n("p",[n("strong",[r._v("Spring配置")])]),r._v(" "),n("ul",[n("li",[r._v("别名。")]),r._v(" "),n("li",[r._v("Bean的配置：Bean就是java对象，由Spring创建和管理.")])])]),r._v(" "),n("li",[n("p",[n("strong",[r._v("依赖注入（DI）")])]),r._v(" "),n("ul",[n("li",[r._v("依赖 : 指Bean对象的创建依赖于容器 . Bean对象的依赖资源 .")]),r._v(" "),n("li",[r._v("注入 : 指Bean对象所依赖的资源 , 由容器来设置和装配 .")]),r._v(" "),n("li",[r._v("构造器注入")]),r._v(" "),n("li",[n("strong",[r._v("Set注入")])]),r._v(" "),n("li",[r._v("扩展的注入：多种类型")]),r._v(" "),n("li",[n("strong",[r._v("Bean的作用域")]),r._v("：在Spring中，那些组成应用程序的主体及由Spring IoC容器所管理的对象，被称之为bean。简单地讲，bean就是由IoC容器初始化、装配及管理的对象 .")])])]),r._v(" "),n("li",[n("p",[n("strong",[r._v("Bean的自动装配")])]),r._v(" "),n("ul",[n("li",[r._v("自动装配是使用spring满足bean依赖的一种方法")]),r._v(" "),n("li",[r._v("spring会在应用上下文中为某个bean寻找其依赖的bean。")]),r._v(" "),n("li",[r._v("——")])])]),r._v(" "),n("li",[n("p",[n("strong",[r._v("使用注解开发")])]),r._v(" "),n("ul",[n("li",[r._v("——")])])]),r._v(" "),n("li",[n("p",[n("strong",[r._v("静态/动态代理模式")])]),r._v(" "),n("ul",[n("li",[r._v("为什么要学习代理模式，因为AOP的底层机制就是动态代理！")]),r._v(" "),n("li",[r._v("——")])])]),r._v(" "),n("li",[n("p",[n("strong",[r._v("AOP面向切面编程")])]),r._v(" "),n("ul",[n("li",[r._v("AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。")]),r._v(" "),n("li",[r._v("——")])])]),r._v(" "),n("li",[n("p",[n("strong",[r._v("整合MyBatis")])]),r._v(" "),n("ul",[n("li",[r._v("——")])])]),r._v(" "),n("li",[n("p",[n("strong",[r._v("声明式事务")])]),r._v(" "),n("ul",[n("li",[r._v("事务在项目开发过程非常重要，涉及到数据的一致性的问题，不容马虎！")]),r._v(" "),n("li",[r._v("事务管理是企业级应用程序开发中必备技术，用来确保数据的完整性和一致性。")]),r._v(" "),n("li",[r._v("事务就是把一系列的动作当成一个独立的工作单元，这些动作要么全部完成，要么全部不起作用。")]),r._v(" "),n("li",[r._v("——")])])])]),r._v(" "),n("h2",{attrs:{id:"参考链接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[r._v("#")]),r._v(" 参考链接")]),r._v(" "),n("p",[n("a",{attrs:{href:"https://www.w3cschool.cn/wkspring/pesy1icl.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("W3Cschool的Spring教程"),n("OutboundLink")],1)]),r._v(" "),n("p",[n("a",{attrs:{href:"https://www.runoob.com/w3cnote/basic-knowledge-summary-of-spring.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("菜鸟教程：Spring基础知识汇总"),n("OutboundLink")],1)]),r._v(" "),n("p",[n("a",{attrs:{href:"http://www.voidme.com/spring",target:"_blank",rel:"noopener noreferrer"}},[r._v("小白教程：Spring教程"),n("OutboundLink")],1)]),r._v(" "),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/weixin_44822455/article/details/108933150?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164544465016780274111253%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164544465016780274111253&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-4-108933150.pc_search_result_positive&utm_term=Spring&spm=1018.2226.3001.4187",target:"_blank",rel:"noopener noreferrer"}},[r._v("狂神说Java及其笔记"),n("OutboundLink")],1)])])}),[],!1,null,null,null);i.default=v.exports}}]);