(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{646:function(s,a,t){"use strict";t.r(a);var n=t(7),r=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[s._v("学习记录，待整理。")])]),s._v(" "),t("blockquote",[t("p",[s._v("20220207递归学习《数据 结构与算法——java》总共18页")])]),s._v(" "),t("h3",{attrs:{id:"递归-分治"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#递归-分治"}},[s._v("#")]),s._v(" 递归/分治")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("递归（recursion ）：")]),s._v(" "),t("ul",[t("li",[s._v("是指在定义自身的同时又出现了对自身的引用。如果一个算法直接或间接地调用自己，则称这个算法是一个递归算法。")]),s._v(" "),t("li",[s._v("一个递归算法总是由两部分组成的：递归调用与递归终止条件。")]),s._v(" "),t("li",[s._v("注意：每次调用传入的变量都不同。")]),s._v(" "),t("li",[s._v("执行一个方法时，就创建一个新的受保护的独立空间（栈空间）。")])])]),s._v(" "),t("li",[t("p",[s._v("("),t("mark",[s._v("这里没有完全理解其作用")]),s._v(")使用递归可以解决如下多方面的问题：")]),s._v(" "),t("ul",[t("li",[s._v("⑴ 问题本身的定义就是递归的，例如许多数学定义就是递归的。")]),s._v(" "),t("li",[s._v("⑵ 问题本身虽然不是递归定义的，但是它所用到的数据结构是递归的，例如链表、树就可以看成是递归定义的数据结构。")]),s._v(" "),t("li",[s._v("⑶ 问题的解法满足递归的性质，例如在本章后面将要介绍的一些问题。")]),s._v(" "),t("li",[s._v("各种数学问题：8 皇后问题 , 汉诺塔, 阶乘问题, 迷宫问题, 球和篮子的问题(google 编程大赛)")]),s._v(" "),t("li",[s._v("各种算法中也会用到递归：快排，归并排序，二分查找，分治算法等.")]),s._v(" "),t("li",[s._v("将用栈解决的问题--\x3e递归代码比较简洁")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("递归的实现与堆栈")])]),s._v(" "),t("ul",[t("li",[s._v("堆栈有一个重要作用：在程序语言中例如Java中实现递归。")]),s._v(" "),t("li",[t("font",{staticStyle:{color:"red"}},[s._v("函数之间调用的过程，系统所做的工作")]),s._v("：\n"),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220207040759953.png",alt:"image-20220207040759953"}})],1),s._v(" "),t("li",[s._v("一个递归算法的实现实际上就是多个相同函数的嵌套调用")]),s._v(" "),t("li",[t("mark",{staticStyle:{color:"red"}},[s._v("重点理解")]),s._v(" "),t("ul",[t("li",[s._v("递归方法在某些情况下却并不一定是最高效的方法，主要原因在于递归方法过于频繁的函数调用和参数传递，这会使系统有较大的开销。")]),s._v(" "),t("li",[s._v("在某些情况下，若采用循环或递归算法的非递归实现，将会大大提高算法的实际执行效率。")]),s._v(" "),t("li",[s._v("当然这也并不意味着不建议使用递归方法解决问题，递归仍然是非常有用和广泛使用的技术。")])])]),s._v(" "),t("li",[s._v("递归算法，循环方法，递归算法的非递归实现。可能有时候都能解决问题，但是需要具体问题具体对待，选择最适的方法。"),t("mark",[s._v("注意选择的技巧，重点理解")]),s._v("。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("基于归纳的递归")])]),s._v(" "),t("blockquote",[t("p",[s._v("希望这里训练形成这样的一种思维，初步可以按照固定的形式来训练。")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("主要思想：是将数学归纳法应用于算法设计之中。")])]),s._v(" "),t("li",[t("p",[s._v("解释：（基本项+递推项）\n"),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220207042001646.png",alt:"image-20220207042001646"}})])]),s._v(" "),t("li",[t("p",[s._v("例子一：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// n阶汉诺塔问题")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n问题描述：\n\t- 假设有 X、Y、Z 三个塔座，初始时有 n 个大小不一的盘子按照从小到大的次序放在塔座 X 上。现在要求将塔座 X 上的所有盘子移动到塔座 Z 上并保持原来的顺序，在移动过程中要满足以下要求：在塔座之间一次只能移动一个盘子并且任何时候大盘子都不能放到小盘子上。\n*/")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n基本项：\n\t- 若只有一个盘子，则不需要使用过渡塔座，直接把它放到目的塔座即可。\n递归项：\n\t- 如果多于一个盘子，则需要将塔座 X 上的 1 到 n-1 个盘子使用 Z 作为过渡塔\n座放到塔座 Y 上，然后将第 n 个盘子（最后一个盘子）放到塔座 Z，最后将塔座 Y 上的 n-1个盘子使用塔座 X 作为过渡放到塔座 Z。\n*/")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n问题分析：\n\t- 若是只有1个盘子，直接将A--\x3eC,只需要一次\n\t- 若有n个盘子，则将(n-1)个盘子从A，由C中转，放到B，即A--(C)--\x3eB。再将第n个盘子A--\x3eC。\n*/")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hanio")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" z"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("move")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" z"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 超过一个")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hanio")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" z"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将X上面的n-1个从Z移动到Y上去")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("move")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" z"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 再将X上的__移动到Z上去  (这个n是递减后的序号，一步一步地移动)")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hanio")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" z"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 再将剩下的n-1个从Y经过X移动到Z上去")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("move")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Move"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"from"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"to"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 模拟")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\nn=1:\nhanio(1, X, Y, Z)\n move(X, 1, Z): Move 1 from X to Z\n\nn=2:\nhanio(2, X, Y, Z)\n hanio(1, X, Z, Y)\n  move(X, 1, Y): Move 1 from X to Y\n move(X, 2, Z): Move 2 from X to Y\n hanio(1, Y, X, Z)\n  move(Y, 1, Z): Move 1 from Y to Z\n\nn=3\n\nn=4\n\n*/")]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n**************************自己的一些理解***********************\nhanio(n, A, B, C) // 主函数，实现n个从A--(B)--\x3eC\nhanio(n-1, A, C, B)\nmove(n, A, C)\nhanio(n-1, B, A, C)\n\n首先一个主函数 hanio(n, A, B, C) 完成将n个盘子从A借助B，移动到C上去（这个函数可以实现此功能，后续可以通过调用此函数实现移动）。然而由于需要满足规则，所以这不是一步完成的，因此将此函数步骤分解如下：\n\thanio(n, A, B, C) {\n\t\n\t}\n通过图解，我们可以先将上面的n-1个盘子（看作整体）从A上面，借助C，移动到B上去，如下：\n\thanio(n, A, B, C) {\n\t\thanio(n-1, A, C, B);\n\t}\n再移动A上剩余的一个盘子（第n个盘子）到C上去，如下：\n\thanio(n, A, B, C) {\n\t\thanio(n-1, A, C, B);\n\t\tmove(n, A, C);\n\t}\n再将B上的n-1个盘子（看作整体），经过A，移动到C上去，此时就完成了全部的移动，如下：\n\thanio(n, A, B, C) {\n\t\thanio(n-1, A, C, B);\n\t\tmove(n, A, C);\n\t\thanio(n-1, B, A, C);\n\t}\n上述，使用到了整体的移动，但是整体的移动其实是调用函数，分解到一步一步地实现的。\n这里的move()函数是真实地移动函数，一步一步地移动。\n上述代码实现了整体功能。\n再加上递归的停止条件，如下：\n\thanio(n, A, B, C) {\n\t\tif(n==1) {\n\t\t\tmove(n, A, C)\n\t\t}\n\t\telse {\n        \thanio(n-1, A, C, B);\n\t\t\tmove(n, A, C);\n\t\t\thanio(n-1, B, A, C);\n\t\t}\n\t}\n\tpublic void move(int n ,char x, char y) {\n\t  // 输出，看到移动的效果\n\t}\n*/")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br"),t("span",{staticClass:"line-number"},[s._v("86")]),t("br"),t("span",{staticClass:"line-number"},[s._v("87")]),t("br"),t("span",{staticClass:"line-number"},[s._v("88")]),t("br"),t("span",{staticClass:"line-number"},[s._v("89")]),t("br"),t("span",{staticClass:"line-number"},[s._v("90")]),t("br"),t("span",{staticClass:"line-number"},[s._v("91")]),t("br"),t("span",{staticClass:"line-number"},[s._v("92")]),t("br"),t("span",{staticClass:"line-number"},[s._v("93")]),t("br"),t("span",{staticClass:"line-number"},[s._v("94")]),t("br"),t("span",{staticClass:"line-number"},[s._v("95")]),t("br"),t("span",{staticClass:"line-number"},[s._v("96")]),t("br"),t("span",{staticClass:"line-number"},[s._v("97")]),t("br"),t("span",{staticClass:"line-number"},[s._v("98")]),t("br"),t("span",{staticClass:"line-number"},[s._v("99")]),t("br")])]),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220208042236346.png",alt:"image-20220208042236346"}}),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220208043653705.png",alt:"image-20220208043653705"}}),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220208044742875.png",alt:"image-20220208044742875"}}),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220208045103149.png",alt:"image-20220208045103149"}}),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220208045216021.png",alt:"image-20220208045216021"}}),s._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220208045309694.png",alt:"image-20220208045309694"}})])]),s._v(" "),t("li",[t("p",[s._v("例子二：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 待补充")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("递推关系求解")])]),s._v(" "),t("ul",[t("li",[t("p",[t("mark",[s._v("数学归纳法")]),s._v("：递归算法的时间复杂度是使用递推关系给出的。使用这个方法的一个问题是要有足够的观察力猜出通项(即上面的基本项+"),t("mark",[s._v("递推项")]),s._v(")，使得这种方法有一定的难度。")])]),s._v(" "),t("li",[t("p",[t("mark",[s._v("迭代法")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("定义：这是求解递推关系的另外一种方法。用这个方法估计递归方程解的渐近阶不要求推测解的渐近表达式，但要求较多的代数运算。方法的思想是迭代地展开递归方程的右端，使之成为一个非递归的和式，然后通过对和式的估计来达到对方程左端即方程的解的估计。"),t("font",{staticStyle:{color:"red"}},[s._v("迭代法会导致繁杂的代数运算")]),s._v("。")],1)]),s._v(" "),t("li",[t("p",[s._v("例子：")]),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220209232840537.png",alt:"image-20220209232840537"}})])])]),s._v(" "),t("li",[t("p",[t("mark",[s._v("递归树")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("定义：在一棵递归树中，每个节点代表了一组递推表达式中函数符号所表示的子问题的代价。我们求出树中每层节点的代价之和就得到一层的代价和，然后我们将树中每层的代价和求出来就可以确定所有递归调用的代价。使用递归树求解递推关系。")])])])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("分治法的基本思想")])]),s._v(" "),t("ul",[t("li",[s._v("什么叫做分治法：对于一个规模为n的问题，若该问题可以容易地解决（比如说规模n较小）则直接解决，否则将其"),t("font",{staticStyle:{color:"red"}},[s._v("分解为k个规模较小的子问题")]),s._v("，这些"),t("mark",[t("font",{staticStyle:{color:"red"}},[s._v("子问题互相独立且与原问题形式相同，递归地解这些子问题，然后将各子问题的解合并得到原问题的解")])],1),s._v("。这种算法设计策略叫做分治法。")],1),s._v(" "),t("li",[s._v("问题的规模越小，越容易直接求解，所需的计算时间也越小。")]),s._v(" "),t("li",[t("font",{staticStyle:{color:"red"}},[s._v("分治法的设计思想")]),s._v("：将一个难以直接解决的大问题，分割成一些规模较小的相同问题，以便各个击破，分而治之。如果原问题可分割成 k (1< k ≤ n)个子问题，并且这些子问题都是可解的，进一步我们还可利用这些子问题的解求出原问题的解，那么此时使用分治法就是可行的。")],1),s._v(" "),t("li",[s._v("由分治法产生的子问题往往是原问题的较小模式，这就为使用递归技术提供了方便。")]),s._v(" "),t("li",[s._v("在这种情况下，反复应用分治手段，可以使子问题与原问题类型一致而其规模却不断缩小，最终使子问题缩小到很容易直接求出其解。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("分治算法解决哪些问题")])]),s._v(" "),t("blockquote",[t("p",[s._v("分治算法是很多高效算法的基础。")])]),s._v(" "),t("ul",[t("li",[s._v("二分搜索")]),s._v(" "),t("li",[s._v("大整数乘法")]),s._v(" "),t("li",[s._v("棋盘覆盖")]),s._v(" "),t("li",[s._v("合并排序")]),s._v(" "),t("li",[s._v("快速排序")]),s._v(" "),t("li",[s._v("线性时间选择")]),s._v(" "),t("li",[s._v("最接近点对问题")]),s._v(" "),t("li",[s._v("循环赛日程表")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("分治算法的基本步骤")])]),s._v(" "),t("ul",[t("li",[s._v("分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题")]),s._v(" "),t("li",[s._v("解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题")]),s._v(" "),t("li",[s._v("合并：将各个子问题的解合并为原问题的解。")])])])]),s._v(" "),t("center",[t("mark",[s._v("+++++++++++++++++++++++++截止线+++++++++++++++++++++++++++++++")])]),s._v(" "),t("blockquote",[t("p",[s._v("20220212《数据结构与算法——java》《大话数据结构》学习记录")])]),s._v(" "),t("h3",{attrs:{id:"查找"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找"}},[s._v("#")]),s._v(" 查找")]),s._v(" "),t("blockquote",[t("p",[s._v("重点在于：")]),s._v(" "),t("ul",[t("li",[s._v("二分查找")]),s._v(" "),t("li",[s._v("树结构查找")]),s._v(" "),t("li",[s._v("散列表（哈希表）查找")])])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("在非数值运算问题中，数据存储量一般很大，为了在大量信息中找到某些值，需要用到查找技术，为了提高查找效率，需要对一些数据进行排序。查找和排序的数据处理量占有非\n常大的比重，故查找和排序的有效性直接影响到算法的性能，因而查找和排序是重要的处理技术")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("查找概论")]),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220211235627735.png",alt:"image-20220211235627735"}})]),s._v(" "),t("ul",[t("li",[s._v("查找表：是由同一类型的数据元素（或记录）构成的集合。")]),s._v(" "),t("li",[s._v("关键字：是数据元素中某个数据项的值。用它可以标识一个数据元素。托此关键字可以唯一的表示一个记录，则称此关键字为主关键字。对于哪些可以识别多个数据元素的关键字，我们称为次关键字。")]),s._v(" "),t("li",[s._v("查找就是根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素（或记录）")]),s._v(" "),t("li",[s._v("查找表按照操作方式可以分为：静态查找表，动态查找表（在查找过程中同时插入查找表中不存在的数据元素，或者从查找表中删除已经存在的某个数据元素）。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("顺序表查找")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("顺序查找也叫做线性查找，是最基本的查找技术。查找过程：从第一个挨个查找比较到最后一个。")])]),s._v(" "),t("li",[t("p",[t("font",{staticStyle:{color:"red"}},[s._v("顺序查找当n很大时，查找效率极其低下")]),s._v("。优点是算法很简单，对静态查找表的记录没有任何要求，在一些小型数据的查找很有用。")],1)]),s._v(" "),t("li",[t("p",[s._v("顺序查找：\n"),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220212001210160.png",alt:"image-20220212001210160"}})])]),s._v(" "),t("li",[t("p",[s._v("顺序查找小优化：")]),s._v(" "),t("p",[s._v("（放置哨兵，免去了每次比较后都要判断查找位置是否越界）\n"),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220212001300323.png",alt:"image-20220212001300323"}})])])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("有序表查找")])]),s._v(" "),t("ul",[t("li",[s._v("一个线性表有序时，对于查找总是很有帮助的。")]),s._v(" "),t("li",[t("strong",[s._v("折半查找（二分查找）")]),s._v(" "),t("ul",[t("li",[s._v("前提：线性表中的记录必须是关键码有序，线性表必须采用顺序存储。对于静态查找表，一次排序后不再变化，这样的算法比较好了。但是对于需要频繁执行插入或删除操作的数据集来说，维护有序的排序会带来不小的工作量，不建议使用。")]),s._v(" "),t("li",[s._v("基本思想：在有序表中，取中间记录作为比较对象，若给定值与中间记录的关键字相等，则查找成功；若给定值小于中间记录的关键字，则在中间记录的左半区继续查找......不断重复上述过程，直到查找成功。")])])]),s._v(" "),t("li",[s._v("插值查找")]),s._v(" "),t("li",[s._v("斐波那契查找")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("查找树")]),s._v("：基于树的查找方法是将待查组织成特定的树结构，并在树结构的基础上实现查找的方法。主要有二叉查找树、平衡二叉树和 B-树。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("二叉查找树(二叉查找树)BST")])]),s._v(" "),t("ul",[t("li",[s._v("它或者是一颗空树，或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有节点的值均小于它的根结构的值；反之亦然；它的左右子树也分别为二叉排序树。")]),s._v(" "),t("li",[s._v("构建一颗二叉排序树的目的，其实不是为了排序，而是为了提高查找和插入删除关键字的速度。"),t("u",[s._v("在一个有序数据集上的查找，速度总是要快于无序的数据集的，而二叉排序树这种非线性的结构，也有利于插入和删除的实现")]),s._v("。即集中了前面几种方法的优点。")]),s._v(" "),t("li",[s._v("二叉排序树的插入删除的时间性能比较好，而对于二叉排序树的查找，它的性能取决于二叉排序树的形状。若比较平衡，查找的时间复杂度也就是O(logn)，近似于折半查找。若不平衡的最坏情况，查找的时间复杂度就是O(n)，等同于顺序查找。"),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220223230651383.png",alt:"image-20220223230651383"}})]),s._v(" "),t("li",[s._v("因此最好把他构建成一颗平衡二叉树。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("平衡二叉树")])]),s._v(" "),t("ul",[t("li",[s._v("平衡二叉树是一种高度平衡的二叉排序树，其中每一个节点的左子树和右子树的高度差至多等于1。")]),s._v(" "),t("li",[t("mark",[s._v("平衡二叉树实现原理")])])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("多路查找树")]),s._v("：其每一个节点的孩子数可以多于两个，且每一个节点处可以存储多个元素。由于它是查找树，所有元素之间存在某种特定的排序关系。2-3树，2-3-4树，B树和B+树。\n"),t("mark",[s._v("为什么需要多路查找树")]),s._v("。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("2-3树")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("2-3-4树")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("B树")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("B+树")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("散列表（哈希表）查找")])])])]),s._v(" "),t("center",[t("mark",[s._v("+++++++++++++++++++++++++截止线+++++++++++++++++++++++++")])]),s._v(" "),t("h3",{attrs:{id:"排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[s._v("#")]),s._v(" 排序")]),s._v(" "),t("h3",{attrs:{id:"图的遍历-广度优先-深度优先"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图的遍历-广度优先-深度优先"}},[s._v("#")]),s._v(" 图的遍历(广度优先/深度优先)")]),s._v(" "),t("h3",{attrs:{id:"贪心"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#贪心"}},[s._v("#")]),s._v(" 贪心")]),s._v(" "),t("h3",{attrs:{id:"回溯"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回溯"}},[s._v("#")]),s._v(" 回溯")]),s._v(" "),t("h3",{attrs:{id:"动态规划"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[s._v("#")]),s._v(" 动态规划")]),s._v(" "),t("h3",{attrs:{id:"字符串kmp搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串kmp搜索"}},[s._v("#")]),s._v(" 字符串KMP搜索")]),s._v(" "),t("h3",{attrs:{id:"其他-最短路径等等"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他-最短路径等等"}},[s._v("#")]),s._v(" 其他(最短路径等等+++)")])],1)}),[],!1,null,null,null);a.default=r.exports}}]);