(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{721:function(t,e,a){"use strict";a.r(e);var s=a(7),v=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("学习《Head first servlets & jsp》的一些记录。")])]),t._v(" "),a("h2",{attrs:{id:"第一章-为什么使用servlet-jsp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一章-为什么使用servlet-jsp"}},[t._v("#")]),t._v(" 第一章 为什么使用servlet&JSP")]),t._v(" "),a("h3",{attrs:{id:"内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("HTTP是TCP/IP的上层协议。TCP协议负责确保从一个网络节点向另一个网络节点发送的文件能够作为一个完整的文件到达目的地，尽管在具体传送过程中这个文件可能回分解为小块传输；IP是一个底层协议，负责把数据块沿路移动/路由到目的地；HTTP则是另外一个网络协议，有一些WEB特定的特性，不过他要依赖于TCP/IP从一处向另外一处完整地传送请求和响应。")])]),t._v(" "),a("li",[a("p",[t._v("HTTP会话的结构是一个简单的请求/响应序列，浏览器发出请求，服务器做出响应。请求和响应的内容如下图：\n"),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124163910763.png",alt:"image-20220124163910763"}})])]),t._v(" "),a("li",[a("p",[t._v("HTTP协议有很多方法，最常用的是get和post方法")])]),t._v(" "),a("li",[a("p",[t._v("GET请求剖析\n"),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124164848313.png",alt:"image-20220124164848313"}})])]),t._v(" "),a("li",[a("p",[t._v("POST请求剖析\n"),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124165024475.png",alt:"image-20220124165024475"}})])]),t._v(" "),a("li",[a("p",[t._v("HTTP响应剖析：HTTP响应包括一个首部一个体。首部信息告诉浏览器使用了什么协议，请求是否成功，以及体中包括的内容是什么类型。体包含了要让浏览器显示的具体内容，例如HTML。")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124165246922.png",alt:"image-20220124165246922"}})]),t._v(" "),a("li",[a("p",[t._v("URL统一资源定位符：Web上的每个资源都有唯一的地址，采用的就是URL格式。\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124165925340.png",alt:"image-20220124165925340"}})])]),t._v(" "),a("li",[a("p",[t._v("有时候"),a("mark",[t._v("不仅仅需要Web服务器")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124171447997.png",alt:"image-20220124171447997"}})]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果我们需要即时的动态页面，且希望把数据写/保存到服务器上面，完全依靠Web服务器是不够的。")])]),t._v(" "),a("li",[a("p",[t._v("Web服务器应用只提供静态页面，但是有一个辅助应用可以生成非静态的即使页面，而且这个辅助应用能于web服务器通信。")])]),t._v(" "),a("li",[a("p",[t._v("一个动态页面显示当前的服务器日期例子：（辅助应用也就是CGI，一般使用Perl语言写CGI脚本）\n"),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124171938723.png",alt:"image-20220124171938723"}})])]),t._v(" "),a("li",[a("p",[a("mark",[t._v("Servlet（Java）和CGI（Perl）在Web服务器里都扮演者辅助应用的角色")]),t._v("。")])])])]),t._v(" "),a("li",[a("p",[t._v("Servlet（编写，部署，运行Servlet的一个快速入门）")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("首先创建一个目录树，放在tomcat服务器下的某个位置上\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124172836603.png",alt:"image-20220124172836603"}})])]),t._v(" "),a("li",[a("p",[t._v("编写一个名字为Ch1Servlet.java的servlet\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124172939175.png",alt:"image-20220124172939175"}})])]),t._v(" "),a("li",[a("p",[t._v("创建一个名字为web.xml的部署描述文件\n每个web应用都有一个部署描述文件，一个部署描述文件可以声明多个servlet(也就是说一个web应用下面可以声明多个servlet"),a("mark",[t._v("这里还需要深入")]),t._v(")。")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124173025409.png",alt:"image-20220124173025409"}})]),t._v(" "),a("li",[a("p",[t._v("在现有的tomcat目录下建立这个目录树\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124173346775.png",alt:"image-20220124173346775"}})])]),t._v(" "),a("li",[a("p",[t._v("从project1目录编译servlet即Ch1Servlet.java成Ch1Servlet.class字节码文件")])]),t._v(" "),a("li",[a("p",[t._v("将Ch1Servlet.class字节码文件复制到WEB-INF/classes，并且把web.xml文件按复制到WEB-INF，效果如第4点。")])]),t._v(" "),a("li",[a("p",[t._v("从tomcat目录启动Tomcat......(startup.sh)")])]),t._v(" "),a("li",[a("p",[t._v("浏览器中输入：http://localhost:8080/ch1/Serv1\nch1是Web应用名字，Serv1是servlet名字。")])]),t._v(" "),a("li",[a("p",[t._v("（"),a("mark",[t._v("没有懂")]),t._v("）现在每次更新servlet类或者部署描述文件都要关闭tomcat。")])])])]),t._v(" "),a("li",[a("p",[t._v("上面的servlet的程序里，在println()里放上了一些HTML，在这里面格式化HTML是不好的，可能出现很多i编译错误。这种做法是"),a("mark",[t._v("把HTML放在Java类中")]),t._v("。")])]),t._v(" "),a("li",[a("p",[a("mark",[t._v("把Java放在HTML页面中")]),t._v("：针对上面的改进，比如后面用到的JSP。它解决的问题：Java开发人员可以处理Java，web网页设计人员处理html页面。\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124175227849.png",alt:"image-20220124175227849"}})])])]),t._v(" "),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("ul",[a("li",[t._v("test1.java里面通过继承约定的接口实现servlet程序，这里可以生成页面显示的内容，通过println或者JSP，编译生成test1.class文件")]),t._v(" "),a("li",[t._v("在web.xml部署描述文件中声明上面的servlet，对应上java类名和servlet类名，以及路径映射")]),t._v(" "),a("li",[t._v("在tomcat的webapps放置一个web应用，例如名字为ch1")]),t._v(" "),a("li",[t._v("在web应用ch1下，按照规定放置上面的两个文件test1.class和web.xml")]),t._v(" "),a("li",[t._v("浏览器输入：http://localhost:8080/ch1/Serv1即可以访问到此servlet创建的页面")])]),t._v(" "),a("h2",{attrs:{id:"第二章-web应用体系结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二章-web应用体系结构"}},[t._v("#")]),t._v(" 第二章 Web应用体系结构")]),t._v(" "),a("h3",{attrs:{id:"内容-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容-2"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("这一章主要讲的内容：（即Web容器如何帮助servlet）\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124181257059.png",alt:"image-20220124181257059"}})])]),t._v(" "),a("li",[a("p",[t._v("什么是容器\n"),a("mark",[t._v("servlet没有main()方法")]),t._v("，他们"),a("mark",[t._v("受控于另外一个java应用")]),t._v("，这个java应用就称为"),a("mark",[t._v("容器")]),t._v("。")]),t._v(" "),a("p",[a("mark",[t._v("Tomcat")]),t._v("就是这样的一个容器。")]),t._v(" "),a("p",[t._v("Web服务器应用(如apache)得到一个指向servlet的请求(而不是其他请求，如请求一个静态页面)时，服务器"),a("mark",[t._v("不是把这个请求直接交给servlet本身")]),t._v("，而是"),a("mark",[t._v("交给部署改servlet的容器")]),t._v("。要由"),a("mark",[t._v("容器向servlet提供HTTP请求和响应")]),t._v("，而且要由"),a("mark",[t._v("容器调用servlet的方法")]),t._v("(如doGet()和doPost()方法)。\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124182514374.png",alt:"image-20220124182514374"}})])]),t._v(" "),a("li",[a("p",[a("mark",[t._v("容器能提供什么")]),t._v("？\n要由容器来管理和运行servlet。多亏了容器，我们可以"),a("mark",[t._v("更加专注于我们自己的业务逻辑")]),t._v("，而不用考虑为"),a("mark",[t._v("线程管理")]),t._v("，"),a("mark",[t._v("安全性")]),t._v("和"),a("mark",[t._v("网络通信")]),t._v("编写代码，这些都由容器来实现。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("通信支持\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124183210398.png",alt:"image-20220124183210398"}})])]),t._v(" "),a("li",[a("p",[t._v("生命周期管理\n容器控制servlet的生与死，负责加载类，实例化和初始化servlet，调用servlet方法，以及使servlet实例能够被垃圾回收。")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124183241523.png",alt:"image-20220124183241523"}})]),t._v(" "),a("li",[a("p",[t._v("多线程支持\n容器会自动地为它接收的每个servlet请求创建一个新的java线程。")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124183350317.png",alt:"image-20220124183350317"}})]),t._v(" "),a("li",[a("p",[t._v("声明方式实现安全\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124183534811.png",alt:"image-20220124183534811"}})])]),t._v(" "),a("li",[a("p",[t._v("JSP支持\n容器负责把JSP代码翻译成真正的Java。")])])])]),t._v(" "),a("li",[a("p",[a("mark",[t._v("容器如何处理请求")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("用户点击一个链接，指向一个servlet")])]),t._v(" "),a("li",[a("p",[t._v("容器看出来这个请求要的是一个sevrvlet，所以容器创建两个对象：\n(1) HttpServletResponse")]),t._v(" "),a("p",[t._v("(2) HttpServletRequest\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124184625097.png",alt:"image-20220124184625097"}})])]),t._v(" "),a("li",[a("p",[t._v("容器根据请求中的URL找到正确的servlet，为这个请求创建或分配一个线程，并把请求和响应对象传递给这个servlet线程。\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124184640467.png",alt:"image-20220124184640467"}})])]),t._v(" "),a("li",[a("p",[t._v("容器调用servlet的service()方法。根据请求的不同类型，service()方法会调用doGet()或者doPost()方法。\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124184715406.png",alt:"image-20220124184715406"}})])]),t._v(" "),a("li",[a("p",[t._v("doGet()方法生成动态页面，并且把这个页面塞到响应对象里。要记住，容器还有响应对象的一个引用。\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124184751454.png",alt:"image-20220124184751454"}})])]),t._v(" "),a("li",[a("p",[t._v("线程结束，容器把响应对象转换成一个HTTP响应，把它发回给客户，然后删除请求和响应对象。\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220124184807392.png",alt:"image-20220124184807392"}})])])])]),t._v(" "),a("li",[a("p",[t._v("Servlet代码里面有什么")]),t._v(" "),a("ul",[a("li",[t._v("容器所创建的请求和响应对象的引用")]),t._v(" "),a("li",[t._v("将HTML文本输出到响应对象")])]),t._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220124185026246.png",alt:"image-20220124185026246"}})])]),t._v(" "),a("li",[a("p",[t._v("容器如何找到servlet\n用户请求必须映射到一个特定的servlet，那么容器怎样把servlet映射到URL呢？")]),t._v(" "),a("ul",[a("li",[t._v("？把映射硬编码到HTML页面中，也就是说客户使用servlet的绝对路径和文件(类)名")]),t._v(" "),a("li",[t._v("？使用容器开发商提供的工具完成映射")]),t._v(" "),a("li",[t._v("？使用某种属性表来存储映射")])]),t._v(" "),a("p",[t._v("一个servlet可以有3个名字：1.客户知道的URL名；2.部署人员知道的秘密的内部名；3.实际的文件名。")]),t._v(" "),a("p",[t._v("建立servlet名的映射，有助于改善应用的灵活性和安全性：增强了灵活性，避免维护噩梦；安全性得到提升。")])]),t._v(" "),a("li",[a("p",[t._v("使用部署描述文件把URL映射到servlet（部署描述文件的一个作用）")]),t._v(" "),a("ul",[a("li",[t._v("把servlet部署到web容器时，会创建一个web.xml部署描述文件，这个文件用于告诉容器如何运行我们的servlet和JSP。")]),t._v(" "),a("li",[t._v("使用两个XML元素把URL映射到servlet：一个将客户知道的公共URL名映射到你自己的内部名，一个元素将自己的内部名映射到一个完全限定类名（即上面所说的三个servlet名字之间的关系）\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220126000333830.png",alt:"image-20220126000333830"}})])])]),t._v(" "),a("li",[a("p",[t._v("部署描述文件其他的作用：")]),t._v(" "),a("ul",[a("li",[t._v("部署描述文件提供了一种声明机制来定制Web应用，而且无需修改源代码。可以使用部署描述文件对Web应用的其他方面进行定制，包括安全角色、错误页面、标记库、初始化配置信息等等。")]),t._v(" "),a("li",[a("mark",[t._v("现在还不需要过分考虑这些细节")])])])]),t._v(" "),a("li",[a("p",[a("mark",[t._v("构建一个基本网站的实例")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("一个网站由多个servlet构成，每个servlet构成一个页面完成一个任务。servlet只运行自己的业务逻辑，然后调用一个特定的JSP处理响应HTML，这样就可以把业务逻辑与表示分开。")]),t._v(" "),a("li",[t._v("客户填写DQL查询表单，点击DO IT按钮，这回发送一个指向DoDQLQuery的HTTP POST请求。Web服务器调用这个servlet，该servlet在数据库上运行查询，然后把请求转发给适当的JSP。这个JSP建立响应HTML，并将其返回。\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220126001839751.png",alt:"image-20220126001839751"}})])])]),t._v(" "),a("li",[a("p",[a("mark",[t._v("上面构建基本网站有待改进的地方")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("上面把业务逻辑都放在了servlet里面，这样无法将业务逻辑用于其他视图。")]),t._v(" "),a("li",[t._v("MVC：关键时业务逻辑要与表示分离，而且要在两者之上放上别的东西，这样业务逻辑本身就能作为可重用的Java类存在。")]),t._v(" "),a("li",[t._v("MVC设计模式：模型，视图，控制器。就是把业务逻辑从servlet里面抽出来，把他放在一个“模型”中，所谓模型就是一个可以重用的普通Java类。模型是业务数据（如购物车的状态）和方法（处理该数据的规则）的组合。")]),t._v(" "),a("li",[a("mark",[t._v("servlet&JSP世界里的MVC")]),t._v("：\n"),a("img",{attrs:{src:"C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220126002719183.png",alt:"image-20220126002719183"}})]),t._v(" "),a("li",[t._v("上述的做法还是有待改进的地方：业务逻辑移到了模型中，那么servlet控制器实际上没有做多少事情，而且所做的工作对这个应用是通用的。他只是更新模型，然后驱动视图反映新的模型。糟糕的是，每一个servlet里面都重复地放着这些通用的应用逻辑，维护麻烦。\n"),a("mark",[t._v("最后答案是什么呢？？？")])])])]),t._v(" "),a("li",[a("p",[t._v("——")])])]),t._v(" "),a("h3",{attrs:{id:"小结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结-2"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("——")]),t._v(" "),a("center",[a("mark",[t._v("-----------------------------------------------分割线------------------------------------------------")])]),t._v(" "),a("h2",{attrs:{id:"第三章-mvc迷你教程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三章-mvc迷你教程"}},[t._v("#")]),t._v(" 第三章 MVC迷你教程")]),t._v(" "),a("h3",{attrs:{id:"内容-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容-3"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("创建和部署MVC Web应用。这是一个简单的应用：")]),t._v(" "),a("ul",[a("li",[t._v("首先建立一个开发环境")]),t._v(" "),a("li",[t._v("建立部署环境")]),t._v(" "),a("li",[t._v("必须遵循servlet和JSP规范，并满足Tomcat需求。")]),t._v(" "),a("li",[t._v("然后开始编写，编译，部署和运行这个应用。")]),t._v(" "),a("li",[t._v("这个应用使用MVC。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("开发Web应用的4大步骤")])]),t._v(" "),a("ol",[a("li",[t._v("分析Web应用的用户视图")]),t._v(" "),a("li",[t._v("分析体系结构")]),t._v(" "),a("li",[t._v("建立创建和部署应用的开发环境和部署环境")]),t._v(" "),a("li",[t._v("创建应用")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("MVC简介")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("整个的体系结构")])]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220213225411017.png",alt:"image-20220213225411017"}})]),t._v(" "),a("li",[a("p",[a("strong",[t._v("创建开发环境")])]),t._v(" "),a("p",[t._v("组织开发目录结构目录。")]),t._v(" "),a("center",[a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220213225753828.png",alt:"image-20220213225753828"}})])],1),t._v(" "),a("li",[a("p",[a("strong",[t._v("创建部署环境")]),t._v("\n要部署一个Web应用，涉及到容器（如Tomcat容器）特定的规则，还涉及Servlet和JSP规范的需求。")]),t._v(" "),a("center",[a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220213233722452.png",alt:"image-20220213233722452"}})])],1),t._v(" "),a("li",[a("p",[a("strong",[a("mark",[t._v("(重点见下述部分)")]),t._v("构建应用的路线图")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220213234407893.png",alt:"image-20220213234407893"}})])])]),t._v(" "),a("h3",[t._v("创建应用")]),t._v(" "),a("h4",[t._v("1. 第一个表单页面的HTML")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220213235712101.png",alt:"image-20220213235712101"}}),t._v(" "),a("h4",[t._v("2. 部署和测试开始页面")]),t._v(" "),a("p",[t._v("要进行测试，需要把它部署到容器（Tomcat目录结构中，启动Tomcat，在浏览器中打开页面）。")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214034155384.png",alt:"image-20220214034155384"}}),t._v(" "),a("h4",[t._v("3. 创建部署描述文件(DD)")]),t._v(" "),a("p",[t._v("部署描述文件web.xml的主要任务是：定义逻辑名与实际类文件之间的映射，客户用于请求的逻辑名是“SelectBeer.do”，实际的servlet类文件是com.example.web.BeerSelect。")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214035436539.png",alt:"image-20220214035436539"}}),t._v(" "),a("h4",[t._v("4. 把逻辑名映射到servlet类文件")]),t._v(" "),a("center",[a("img",{attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214044724717.png",alt:"image-20220214044724717"}})]),t._v(" "),a("h4",[t._v("5. 控制器servlet的第1版(最简单的)")]),t._v(" "),a("p",[t._v("（第1版：确保HTML页面能适当地调用servlet，而且servlet能够正确地接受HTML参数）。")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214050220376.png",alt:"image-20220214050220376"}}),t._v(" "),a("h4",[t._v("6. 编译、部署和测试控制器servlet")]),t._v(" "),a("p",[t._v("编译servlet，把类放在开发环境中。\n要部署servlet，需要建立.class文件的一个副本，把它移到部署结构的目录下。")]),t._v(" "),a("p",[t._v("启动Tomcat，启动浏览器，访问，观察浏览器上的servlet响应显示。")]),t._v(" "),a("h4",[t._v("7. 构建和测试模型类")]),t._v(" "),a("p",[t._v("在MVC中。模型是指应用的“后台”，大多数情况下，这只是普通的Java代码。")]),t._v(" "),a("p",[t._v("例如：\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214075041391.png",alt:"image-20220214075041391"}})]),t._v(" "),a("p",[t._v("刚刚开始测试模型时，模型还在开发环境中，与其他Java类一样，此时无需启动Tomcat也能测试。")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214075443925.png",alt:"image-20220214075443925"}}),t._v(" "),a("h4",[t._v("8.  第2版servlet的代码(模型model)")]),t._v(" "),a("p",[t._v("模型只是普通的Java，所以需要先实例化模型类，再调用它的方法。")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214075842264.png",alt:"image-20220214075842264"}}),t._v(" "),a("p",[t._v("主要有两件事：重新编译servlet；部署模型类。")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214080059851.png",alt:"image-20220214080059851"}}),t._v(" "),a("h4",[t._v("9. 第3版servlet的代码(JSP)")]),t._v(" "),a("p",[t._v("这一版要把servlet修改为”调用“JSP来生成输出（视图）。")]),t._v(" "),a("p",[t._v("Tomcat容器提供了一种”请求分发“的机制，允许容器管理的一个组件调用另外一个组件。我们可以使用这个”请求分发“机制，servlet从模型得到信息，并且把它保存再请求对象中，然后把请求分发给JSP。")]),t._v(" "),a("p",[t._v("由上述叙述得知，需要做的两件事情是：")]),t._v(" "),a("ol",[a("li",[t._v("把模型组件的回答增加到请求对象，以便JSP访问")]),t._v(" "),a("li",[t._v("要求容器把请求转发给”result.jsp“")])]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214081203826.png",alt:"image-20220214081203826"}}),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214081230542.png",alt:"image-20220214081230542"}}),t._v(" "),a("h3",{attrs:{id:"小结-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结-3"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("——")]),t._v(" "),a("center",[a("mark",[t._v("前3章介绍的都是背景信息")])]),t._v(" "),a("h2",{attrs:{id:"第四章-请求和响应-作为servlet-54页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第四章-请求和响应-作为servlet-54页"}},[t._v("#")]),t._v(" 第四章 （请求和响应）作为servlet（54页）")]),t._v(" "),a("h3",{attrs:{id:"内容-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容-4"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("这一章主要讲的内容：详细讲解servlet，servlet的任务是得到一个客户的请求，再发回一个响应。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("大纲")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214082155131.png",alt:"image-20220214082155131"}})])]),t._v(" "),a("li",[a("p",[a("font",{staticStyle:{color:"red"}},[t._v("容器（Tomcat容器）全盘控制着servlet的一生，他会创建请求和响应对象，为servlet创建和分配一个线程，并调用servlet的service()方法，把请求和响应对象的引用作为参数传递给servlet")]),t._v("。")],1)]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Servlet的生命周期")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214090938041.png",alt:"image-20220214090938041"}})])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("生命周期中的三大重要时刻")]),t._v("\ninit()\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214091706209.png",alt:"image-20220214091706209"}})]),t._v(" "),a("p",[t._v("service()\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214091719265.png",alt:"image-20220214091719265"}})]),t._v(" "),a("p",[t._v("doGet()和doPost()\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214091736401.png",alt:"image-20220214091736401"}})]),t._v(" "),a("p",[t._v("流程：")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214092636020.png",alt:"image-20220214092636020"}})]),t._v(" "),a("li",[a("p",[t._v("注意，每次来一个客户请求时，都会完成一个service() -> doGet()方法调用序列。每个请求都在一个单独的线程中运行。任何servlet类都不会有多个实例。 容器运行多个线程来处理对一个servlet的多个请求。对于每个客户请求，会生成一对新的请求和响应对象。\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214093259182.png",alt:"image-20220214093259182"}})])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("servlet初始化")]),t._v("\n在servlet没有完全初始化之前绝不能允许servlet的service()方法。")]),t._v(" "),a("p",[t._v("为什么一定需要init()方法呢？构造函数不足以初始化servlet吗？")]),t._v(" "),a("p",[t._v("构造函数使之成为一个对象，过早地做有关servlet的事情为时尚早。记住就行，不要在servlet的构造函数中放任何东西。")]),t._v(" "),a("p",[t._v("而什么都可以放在init()里面。init()在servlet一生中只运行一次。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("("),a("mark",[t._v("记忆内容")]),t._v(")ServletConfig对象和ServletContext对象")])]),t._v(" "),a("ul",[a("li",[t._v("每个servlet都有一个ServletConfig对象，每个Web应用有一个ServletContext。")]),t._v(" "),a("li",[t._v("ServletConfig对象：用于向servlet传递部署时信息；用于访问ServletContext；参数在部署描述文件中配置。")]),t._v(" "),a("li",[t._v("ServletContext对象：用于访问Web应用参数（也是在部署描述文件中配置）；相当于应用的一个公告栏，可以在这里放一些消息即属性，应用的其他部分可以访问这些消息；用于得到服务器消息。")])])]),t._v(" "),a("li",[a("p",[a("font",{staticStyle:{color:"red"}},[t._v("servlet的真正任务是处理请求。上下文对象ServletContext和配置对象ServletConfig帮我我们完成这个任务")]),t._v("。")],1)]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Get和Post的区别")])]),t._v(" "),a("ul",[a("li",[t._v("数据大小：GET和POST都能发送参数，但是利用GET的话，对参数数据有限制，只能是放在请求行的内容。POST有一个体。")]),t._v(" "),a("li",[t._v("安全性：使用GET时，参数数据会显示在浏览器的输入栏（地址栏）中。用一个“？”分隔。")]),t._v(" "),a("li",[t._v("书签。")]),t._v(" "),a("li",[a("mark",[t._v("(???)")]),t._v("这些方法要如何使用：GET用于得到某些东西，只是简单的获取。POST则用于发送数据来进行处理。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("幂等/非幂等")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214111211682.png",alt:"image-20220214111211682"}})]),t._v(" "),a("ul",[a("li",[t._v("GET是幂等的，只是要得到一些东西，不会修改服务器上的任何内容。执行多次，不会产生任何不好的副作用。（GET是幂等的，但是完全可以实现一个非幂等的doGet()方法，这不是一回事）。")]),t._v(" "),a("li",[t._v("POST不是幂等的，POST体中的提交数据可能用于不可逆转的事务。所以做doPost()时要特别小心。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("如何确定浏览器发送的是GET还是POST请求")])]),t._v(" "),a("ul",[a("li",[t._v("简单的超链接往往意味着GET")]),t._v(" "),a("li",[t._v('明确地说了method="POST"就是POST')]),t._v(" "),a("li",[t._v('若没有在表单中指出method="POST"，就会默认为GET请求。（若是只有doPost()方法而没有doGet()方法就出大问题）。')])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("发送和使用一个单独的参数")])]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214112332142.png",alt:"image-20220214112332142"}}),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214112401888.png",alt:"image-20220214112401888"}}),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214112434333.png",alt:"image-20220214112434333"}})]),t._v(" "),a("li",[a("p",[a("strong",[t._v("除了参数，我们还能从请求对象得到什么")])]),t._v(" "),a("p",[t._v("从请求对象还可以得到其他东西，包括首部，cookie，会话，查询串和输入流。"),a("mark",[t._v("ServletRequest和HttpServletRequest接口提供了大量可以调用的方法")]),t._v("。")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214113104639.png",alt:"image-20220214113104639"}})]),t._v(" "),a("li",[a("p",[a("strong",[t._v("上述是请求部分，这里简单介绍一下响应")])]),t._v(" "),a("ul",[a("li",[t._v("一般，我们会将响应对象得到一个输出流（通常是Writer），并使用这个流写出HTML（或其他类型的内容），返回给客户。不过，我们也可以使用响应设置其他首部，发送错误，以及增加cookie。"),a("font",{staticStyle:{color:"red"}},[t._v("即除了IO输出外，响应对象还有其他方法")]),t._v("。")],1),t._v(" "),a("li",[t._v("接口及其方法\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220214193528276.png",alt:"image-20220214193528276"}})]),t._v(" "),a("li",[a("font",{staticStyle:{color:"red"}},[t._v("使用JSP而非从servlet把HTML发回到输出流")]),t._v("（因为格式化HTML通过输出流的println()的方法打印出来的方法不好）。（当然也可以使用servlet）。")],1)])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("示例：在响应中发送字节：JAR")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("首先设置内容类型：response.setContentType()    希望浏览器看出来这是一个JAR类型，而不是HTML类型。可以这么想，对应HTTP响应头部的类型。")])]),t._v(" "),a("li",[a("p",[t._v('ServletContext ctx = getServletContext();\nInputStream is = ctx.getResourceAsStream("/bookCode.jar").'),a("br"),t._v("\n名为bookCode.jar的资源给我一个输入流。")])]),t._v(" "),a("li",[a("p",[t._v("OutputStream os = response.getOutputStream();\nis.read()")]),t._v(" "),a("p",[t._v("os.write()."),a("br"),t._v("\n读取JAR字节，写到我们从响应对象得到的输出流。")])])]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220215040652963.png",alt:"image-20220215040652963"}})]),t._v(" "),a("li",[a("p",[a("strong",[t._v("内容类型")])]),t._v(" "),a("p",[t._v("内容类型是HTTP响应中必须有的一个HTTP首部。通过"),a("font",{staticStyle:{color:"red"}},[t._v("setContentType()")]),t._v("。")],1)]),t._v(" "),a("li",[a("p",[a("strong",[t._v("PrintWriter和OutputStream")]),t._v("\nServletResponse接口提供了两个可以选择的流：")]),t._v(" "),a("ul",[a("li",[t._v("ServletOutputStream用于输出字节")]),t._v(" "),a("li",[t._v("PrintWriter用于输出字符数据。")])]),t._v(" "),a("p",[t._v("PrintWriter实际上“包装”了ServletOutputStream。有它的一个引用，而且会把它的调用委托给ServletOutputStream。但是PrintWriter增加了更高层的“字符友好”方法。")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220215042859283.png",alt:"image-20220215042859283"}})]),t._v(" "),a("li",[a("p",[a("strong",[t._v("响应首部")]),t._v('\nresponse.setHeader("foo", "bar"): 如果响应中已经有同名的首部，就替换，否则向响应增加一个新首部和值。')]),t._v(" "),a("p",[t._v('response.addHeader("foo", "bar"): 为响应增加一个新首部和值，或者向一个现有的首部增加另外一个值。')]),t._v(" "),a("p",[t._v('response.setIntHeader("foo", 42): 便利方法，用提供的整数值替换现有首部的值，或者向响应增加一个新首部和值。\n'),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220215043556138.png",alt:"image-20220215043556138"}})])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("请求重定向和请求分发")])])])]),t._v(" "),a("h3",{attrs:{id:"小结-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结-4"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("——")]),t._v(" "),a("h2",{attrs:{id:"第五章-作为web应用-74页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第五章-作为web应用-74页"}},[t._v("#")]),t._v(" 第五章 作为Web应用(74页)")]),t._v(" "),a("h3",{attrs:{id:"内容-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容-5"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),a("ul",[a("li",[t._v("这一章主要讲的内容：没有servlet能够独立存在。在当前的现代Web应用中，许多组件都是在一起协作共同完成一个目标。有模型。控制器和视图；会用到参数和视图，还有一些辅助类。\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220213213432950.png",alt:"image-20220213213432950"}})]),t._v(" "),a("li",[t._v("某些信息如果硬编码在servlet源代码中，改变则需要重新编译较麻烦；若写在web.xml中，其中servlet以某种方式来读取，不需要改变servlet源代码重新编译，只需要改变xml文件重新部署即可。")]),t._v(" "),a("li",[a("strong",[t._v("Servlet初始化参数")]),t._v(" "),a("ul",[a("li",[t._v("servlet继承了getServletConfig()，所以可以从servlet中的任何方法调用getServletConfig()来得到ServletConfig的一个引用。以此可以调用getInitParamenter()方法，注意此方法不能在构造函数中调用，因为容器在调用init()之前不是一个完整的servlet。")]),t._v(" "),a("li",[t._v("容器初始化一个servlet时，会为这个servlet建一个唯一的ServletConfig。")]),t._v(" "),a("li",[t._v("在servlet初始化之前不能使用servlet初始化参数。")]),t._v(" "),a("li",[t._v("servlet初始化参数只能读一次，就是在容器初始化servlet的时候（除非重新部署）。")]),t._v(" "),a("li",[t._v("示例图：")]),t._v(" "),a("li",[t._v("思考一个问题：相比写在servlet修改时需要重新编译，这里只需要写在web.xml修改时重新部署也好很多，但是问题是容器只读一次servlet初始化参数，还是不能在servlet生命周期中改变email地址。若采用重新部署，还有热部署，只是因为一个初始化参数改变就让应用关闭也不是一个好的想法。若初始化值经常改变，最好让servlet方法从一个文件或者数据库得到值，不过这种做饭意味着每次servlet代码运行时有更多的开销。")]),t._v(" "),a("li",[t._v("serveltConfig：主要任务是提供初始化参数；他还提供一个ServletContent，但一般使用另外一种方法得到上下文。")]),t._v(" "),a("li",[t._v("JSP能不能得到Servlet初始化参数？\n"),a("ul",[a("li",[t._v('请求对象允许设置属性（request.setAttribute("styles", result);），得到请求的任何其他servlet或JSP都能使用这些属性。')]),t._v(" "),a("li",[t._v("但是，上述的设置请求属性只适用于接收转发请求的JSP。例如对于email地址，因为我们可能需要在整个应用中使用这个email地址，这个方法就没用了。因此，我们需要针对整个web应用的初始化参数——引出“上下文初始化参数”。")])])]),t._v(" "),a("li",[t._v("每个servlet有一个ServletConfig，每个Web应用有一个ServletContext。")]),t._v(" "),a("li",[t._v("应用范围的上下文初始化参数的作用更大，上下文参数的最常见的用途可能就是存储数据库查找名。")]),t._v(" "),a("li",[t._v("注意：要把初始化参数认为是部署时常量，可以在运行时得到这些初始化参数，但是不能设置。")]),t._v(" "),a("li",[t._v("上下文初始化参数只能是String。")])])]),t._v(" "),a("li",[a("strong",[t._v("ServletContextListener（上下文监听事件）")]),t._v(" "),a("ul",[a("li",[t._v("如果整个Web应用有一个main方法就好了，能放一些在servlet或者JSP之前运行的代码，可以用来初始化应用。")]),t._v(" "),a("li",[t._v("我们可以建立一个单独的类，它能监听ServletContext一生中的两个关键事件，初始化和撤销。这个类实现了javax.servlet.ServletContextListener。")]),t._v(" "),a("li",[t._v("（"),a("mark",[t._v("好好领悟")]),t._v("）一个简单的ServletContextListener：\n"),a("ul",[a("li",[t._v("要求：我们要把String初始化参数转换成一个真正的对象——一个Dog。监听者的任务是得到有关狗品种的上下文初始化参数，然后使用这个String来构造一个Dog对象。监听者再把这个Dog对象存放到一个ServletContext属性中，以便servlet获取。")]),t._v(" "),a("li",[t._v("重点：使用初始化参数来创建一个对象，让应用的所有部分都能共享这个对象。")]),t._v(" "),a("li",[t._v("要监听ServletContext事件，需要编写一个实现ServletContextListener的监听者类，把它放在WEB-INF/classes目录中，并在部署描述文件中放一个"),a("listener",[t._v("元素来告诉容器。")])],1),t._v(" "),a("li",[t._v("要实现这个案例需要3个类和1个部署描述文件。")]),t._v(" "),a("li",[t._v("监听者类：实现了ServletContextListener，得到上下文初始化参数，创建Dog，并把Dog设置为上下文属性，这样应用的其他部分就能够得到这个属性（Dog）的值了")]),t._v(" "),a("li",[t._v("属性类：Dog.java。作为一个属性值，由ServletContextListener实例化，并设置在ServletContetx中，以便于servlet获取。")]),t._v(" "),a("li",[t._v("Servlett：这个类扩展了HttpServlet。任务是验证监听者的工作，这个servlet会从上下文得到Dog属性，然后调用Dog的Breed()方法，并把结果打印到响应。")]),t._v(" "),a("li",[t._v("部署描述文件：使用"),a("listener",[t._v("元素，只需要类名")])],1)])])])]),t._v(" "),a("li",[t._v("只要在生命周期里的重要时刻，总会有一个监听者在监听。除了上下文事件外，还可以监听上下文属性、servlet请求和属性，以及HTTP会话和会话属性相关的事件。记住几个常用的监听者API，其他的认识就行。以下是8个监听者的图片（"),a("mark",[t._v("P182")]),t._v("）。")]),t._v(" "),a("li",[a("strong",[t._v("HttpSessionBindingListener / HttpSessionAttributeListener  属性相关")]),t._v(" "),a("ul",[a("li",[t._v("普通的HttpSessionAttributeListener类只是希望当会话中增加、删除或替换了某种类型的属性时能够知道，但是HttpSessionBindingListener不同，有了HttpSessionBindingListener，属性本身才能够在增加到一个会话或者从会话删除时得到通知。")])])]),t._v(" "),a("li",[a("strong",[t._v("什么是属性")]),t._v(" "),a("ul",[a("li",[t._v("之前，我们将Dog作为一个属性存储（设置）到ServletContext，这样应用的其他部分就能够得到它了。")]),t._v(" "),a("li",[t._v("由此可见，属性就是一个对象，可能设置（绑定）到另外3个servlet  API对象中的某一个，包括ServletContext、HttpServletRequest（或ServletRequest）或者HttpSession。可以把它简单的认为是一个名/值对（名：一个String；值：一个Object）。")]),t._v(" "),a("li",[t._v("设置属性的方法：setAttribute（String name， Object value）")]),t._v(" "),a("li",[t._v("属性的作用域：上下文，请求和会话")])])]),t._v(" "),a("li",[a("strong",[t._v("上下文属性不是线程安全的")]),t._v(" "),a("ul",[a("li",[a("mark",[t._v("本质原因")]),t._v("：应用中的每个部分都能访问上下文属性，这意味着多个servlet。多个servlet则说明可能有多个线程。且因为请求是并发处理的，每个请求在一个单独的线程中处理。不管请求指向同一个servlet还是不同的servlet都是如此。")]),t._v(" "),a("li",[t._v("同步服务方法diGet()能解决线程安全问题吗？？？不能，因为同步服务方法会防止同一个servlet中的其他线程访问上下文属性，但是不能阻止另外一个不同的servlet的访问。")]),t._v(" "),a("li",[t._v("解决方法：保护上下文属性的一般做法是对上下文对象本身同步。如果访问上下文的每一个人都必须得到上下文对象的锁，就能保证一次只有一个线程可以得到或设置上下文属性。示例如下图（"),a("mark",[t._v("P197")]),t._v("）。")])])]),t._v(" "),a("li",[a("strong",[t._v("会话属性不是线程安全的")]),t._v(" "),a("ul",[a("li",[a("mark",[t._v("后续深入会话")]),t._v("。")]),t._v(" "),a("li",[t._v("必须对HttpSession同步来保护会话属性。")])])]),t._v(" "),a("li",[a("strong",[t._v("只有请求属性和局部变量是线程安全的")]),t._v(" "),a("ul",[a("li",[t._v("实例变量不是线程安全的：如果有多个客户对一个servlet做出请求，这意味着有多个线程在运行该servlet代码，而且所有线程都能访问servlet的实例变量，因此，实例变量不是线程安全的。")]),t._v(" "),a("li",[t._v("记住：servlet只有一个实例，但是可以有多个线程。")])])])]),t._v(" "),a("h3",{attrs:{id:"小结-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结-5"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("——")]),t._v(" "),a("h2",{attrs:{id:"第六章-会话状态-58页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第六章-会话状态-58页"}},[t._v("#")]),t._v(" 第六章 会话状态(58页)")]),t._v(" "),a("h3",{attrs:{id:"内容-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容-6"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("这一章主要讲的内容：没有servlet能够独立存在。在当前的现代Web应用中，许多组件都是在一起协作共同完成一个目标。\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220213213432950.png",alt:"image-20220213213432950"}})])]),t._v(" "),a("li",[a("p",[t._v("HttpSession对象可以保存跨同一个客户多个请求的会话状态。与一个特定客户的整个会话期间，HttpSession会持久存储。对于会话期间客户做的所有请求，从中的得到的所有信息都可以用HttpSession对象保存。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("会话如何工作")])]),t._v(" "),a("ul",[a("li",[t._v("图片（"),a("mark",[t._v("P228")]),t._v("）")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("会话ID，cookie和会话的其他基础知识")])]),t._v(" "),a("ul",[a("li",[a("u",[t._v("思考一个问题")]),t._v("：由于Http是无状态连接，也就是连接只为一个请求/响应存在。对于容器而言，每个请求都来自于一个新的客户。那么容器怎么能知道客户是谁呢？？？（IP地址：不行不能唯一标识internet上的特定客户；安全信息：条件苛刻）——会话ID。")]),t._v(" "),a("li",[a("u",[t._v("会话ID")]),t._v("：对客户的第一个请求，容器会生成一个唯一的会话ID，并通过响应把它返回给客户。客户再在以后的每一个请求中发回这个会话ID。容器看到这个ID后，就会找到匹配的会话，并把这个会话与请求关联。")]),t._v(" "),a("li",[a("u",[t._v("客户和容器如何交换会话ID信息")]),t._v("：通过cookie交换这个会话ID信息。示例图（"),a("mark",[t._v("P232")]),t._v("）。HTTP响应中的Set-Cookie首部，HTTP请求中的Cookie首部。")]),t._v(" "),a("li",[a("u",[t._v("容器几乎会做cookie的所有工作")]),t._v("：\n"),a("ul",[a("li",[t._v("我们所需要做的知识告诉容器我们想创建或使用一个会话。")]),t._v(" "),a("li",[t._v("除此之外，生成会话ID，创建新的cookie对象，把会话ID放到cookie中，把cookie设置为响应的一部分等等工作都将由容器负责。")]),t._v(" "),a("li",[t._v("在响应中（服务器端——>客户端）发送一个会话cookie：HttpSession session=request getSession();向请求要一个会话，容器会负责余下的所有事情。对请求第一次调用这个方法时，会导致随响应发送一个cookie（但是还不能保证客户端会接收这个cookie）。")]),t._v(" "),a("li",[t._v("从请求得到会话ID：HttpSession session=request getSession();得到会话ID cookie，并把它与现有会话匹配。")])])]),t._v(" "),a("li",[a("u",[t._v("如何知道会话已经存在还是刚刚创建")]),t._v("？\n"),a("ul",[a("li",[t._v("不论是否已经有了一个会话，getSession()方法都能返回一个会话")]),t._v(" "),a("li",[t._v("session.isNew()  如果客户还没有用这个会话ID做过响应，isNew()返回true")]),t._v(" "),a("li",[t._v("得到会话的方法：①request.Session()②从会话事件对象得到会话。")])])]),t._v(" "),a("li",[t._v("客户不接受cookie（禁用cookie的客户会忽略“Set-Cookie”的响应首部），也能完成会话，只是需要稍微多做一点工作。——URL重写。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("URL重写")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("目的：让客户和容器交换会话ID信息")])]),t._v(" "),a("li",[a("p",[t._v("URL重写能取得置于cookie中的会话ID，并且把会话ID附加到访问应用的各个URL的最后。\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220223182904342.png",alt:"image-20220223182904342"}})]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220223182928724.png",alt:"image-20220223182928724"}})]),t._v(" "),a("li",[a("p",[t._v("若没有显示地对URL编码(需要对响应中发送的所有URL完成编码)，且没有设置cookie，就无法使用会话")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/BeerTest.do"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresponse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeRedirectURL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/BeerTest.do"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重定向到另外一个URL使用一个会话")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])])]),t._v(" "),a("li",[a("p",[a("u",[t._v("如果确实对URL完成了编码，容器会先尝试使用cookie来完成会话管理，只有当cookie方法失败时，才会转而使用URL重写")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("注意他的优先级策略")])]),t._v(" "),a("li",[a("p",[a("mark",[t._v("注意URL编码只与响应有关，只能由响应处理")]),t._v("。")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("删除会话")])]),t._v(" "),a("ul",[a("li",[t._v("无效的会话对象会占用资源")]),t._v(" "),a("li",[t._v("我们希望如果一个会话太长时间不活动，容器就把他识别出来，并且撤销这个会话。")]),t._v(" "),a("li",[t._v("调用getSession()得到一个实现了HttpSession接口的类实例。它可以使用会话来得到和设置会话作用域和属性，以及一些设置方法。")]),t._v(" "),a("li",[t._v("会话的三种死法：\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220223184502510.png",alt:"image-20220223184502510"}})]),t._v(" "),a("li",[t._v("设置会话超时：①在web,xml中配置会话超时②设定一个特定的会话超时，使用方法")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("cookie")])]),t._v(" "),a("ul",[a("li",[a("mark",[t._v("cookie实际上是客户和服务器之间交换的一小段数据String对")]),t._v("。")]),t._v(" "),a("li",[t._v("用户不必介入，cookie交换自动完成。")]),t._v(" "),a("li",[t._v("我们可以定制cookie，例如让cookie在客户端上待得更久一点,参照servlet API")]),t._v(" "),a("li",[a("mark",[t._v("使用servlet API使用Cookie")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("HttpSession")])]),t._v(" "),a("ul",[a("li",[t._v("创建")]),t._v(" "),a("li",[t._v("撤销")]),t._v(" "),a("li",[t._v("增加，删除，替换会话属性")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("HttpSessionBindingListener")])]),t._v(" "),a("ul",[a("li",[t._v("当此属性绑定或者解决绑定到某个会话中，会提醒，以此执行某段程序实现对应功能")]),t._v(" "),a("li",[t._v("简单示例：\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220223190006251.png",alt:"image-20220223190006251"}})])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("会话迁移")])]),t._v(" "),a("ul",[a("li",[t._v("每个Web应用得一个给定得会话ID，只有一个HttpSession对象，而不论应用分布在多少个虚拟机上，")])])]),t._v(" "),a("li",[a("p",[t._v("关于会话相关得监听者例子。")])])]),t._v(" "),a("h3",{attrs:{id:"小结-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结-6"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("——")]),t._v(" "),a("center",[a("mark",[t._v("-----------------------------------------------分割线------------------------------------------------")])]),t._v(" "),a("h2",{attrs:{id:"第七章-作为jsp-使用jsp-62页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第七章-作为jsp-使用jsp-62页"}},[t._v("#")]),t._v(" 第七章 作为JSP：使用JSP（62页）")]),t._v(" "),a("h3",{attrs:{id:"内容-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容-7"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("主要内容")])]),t._v(" "),a("p",[t._v("JSP会变成servlet。容器会产看我们的JSP，先把他转换成Java源代码，再编译成完整的Java servlet类。我们将会了解到如何编写JSP，为什么编写JSP，还有在JSP中写些什么。\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220227140644270.png",alt:"image-20220227140644270"}})])]),t._v(" "),a("li",[a("p",[t._v("介于<%  %>之间的所有代码就是"),a("mark",[t._v("scriptlet")]),t._v("，它们只是普通的java代码。")])]),t._v(" "),a("li",[a("p",[t._v("现在写一个简单的JSP。这里出现了一个问题，JSP不认识Couter类。")]),t._v(" "),a("center",[a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220227141410975.png",alt:"image-20220227141410975"}})]),t._v(" "),a("p",[t._v("解决这个问题有两种方法：")]),t._v(" "),a("center",[a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220227142048396.png",alt:"image-20220227142048396"}})]),t._v(" "),a("ol",[a("li",[a("p",[t._v("导入包(使用到了指令)")]),t._v(" "),a("center",[a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220227142342364.png",alt:"image-20220227142342364"}})])],1),t._v(" "),a("li",[a("p",[t._v("在代码中使用完全限定类名")]),t._v(" "),a("center",[a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220227142128037.png",alt:"image-20220227142128037"}})])],1)])],1),t._v(" "),a("li",[a("p",[a("mark",[t._v("指令")]),t._v("可以为我们提供一条途径，可以在页面转换时候向容器提供特殊的指示。指令有三种：page,include,tagible。")])]),t._v(" "),a("li",[a("p",[t._v('<%@  %>的为指令。例如<%@ page import="foo.*" %>为带有import属性的page指令。')])]),t._v(" "),a("li",[a("p",[t._v("引入JSP的部分原因是避免println()，正是这个原因才有了"),a("mark",[t._v("JSP表达式")]),t._v("，表达式元素会自动地打印放在标记之间的内容。例如<%= Couter.getCount() %>，容器会拿到我在之间输入的所有内容，并且把他作为参数传递给打印语句，故不需要分号。")])]),t._v(" "),a("li",[a("p",[t._v("page指令的目的是为容器提供一些信息，容器把我们的JSP转换为servlet时候需要的一些信息。")])]),t._v(" "),a("li",[a("p",[a("mark",[t._v("我们需要了解到不同的JSP元素分别放在servlet类文件中的位置，才能够构建JSP")])])]),t._v(" "),a("li",[a("p",[t._v("所有scriptlet和表达式代码都是放在服务方法中的，所以也就是在scriptlet中声明的变量总是局部变量")])]),t._v(" "),a("li",[a("p",[t._v("JSP元素："),a("mark",[t._v("“声明”")]),t._v("。例子，<%! int cout=0; %>。它用于声明所生成的servlet类的成员。这说明方法和变量可以声明。说明我们可以声明静态变量和方法。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("容器处理JSP的流程")])]),t._v(" "),a("ol",[a("li",[t._v("查看指令")]),t._v(" "),a("li",[t._v("创建一个HttpServlet子类")]),t._v(" "),a("li",[t._v("import")]),t._v(" "),a("li",[t._v("声明，写到类文件")]),t._v(" "),a("li",[t._v("建立服务方法")]),t._v(" "),a("li",[t._v("将普通的HTML。scriptlet和表达式放到服务方法中，完成格式化，写道PrintWriter输出")])]),t._v(" "),a("center",[a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220227144517610.png",alt:"image-20220227144517610"}})])],1),t._v(" "),a("li",[a("p",[a("strong",[t._v("隐式对象")])]),t._v(" "),a("ul",[a("li",[t._v("容器把JSP转换成servlet时，服务方法最前面有一堆隐式对象声明和赋值")]),t._v(" "),a("li",[t._v("JSP可能需要servlet能用的一些信息。所有隐式对象都会映射到serblet/JSP API中的某个东西。")])]),t._v(" "),a("center",[a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220227145151699.png",alt:"image-20220227145151699"}})])],1),t._v(" "),a("li",[a("p",[a("strong",[t._v("JSP的生命周期和初始化")])]),t._v(" "),a("blockquote",[a("p",[t._v("见P306始的图")])]),t._v(" "),a("ul",[a("li",[t._v("在JSP生命周期中，整个转换和编译步骤只发生一次")]),t._v(" "),a("li",[t._v("JSP一旦得到转换和编译，就和其他servlet一样了")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("初始化JSP")])]),t._v(" "),a("ul",[a("li",[t._v("配置servlet初始化参数：唯一的区别在于必须在"),a("servlet",[t._v("标记中添加一个"),a("jsp-file",[t._v("元素，例如"),a("jsp-file",[t._v("/TestInit.jsp")])],1)],1)],1),t._v(" "),a("li",[t._v("覆盖jspInit()：如果实现了这个方法，在JSP页面成为servlet最开始，容器会嗲用这个方法（由init()方法调用）")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("JSP中的属性")])]),t._v(" "),a("ul",[a("li",[t._v("大多数情况下会使用4个隐式对象之一得到和设置对应JSP中4个属性作用域的属性（servlet请求，会话和应用，页面作用域）"),a("img",{attrs:{src:"C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220227151206538.png",alt:"image-20220227151206538"}})]),t._v(" "),a("li",[t._v("还可以"),a("mark",[t._v("只使用pageContext隐式对象来设置和获取任意作用域的属性")]),t._v("。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("pageContext隐式对象")])]),t._v(" "),a("ul",[a("li",[t._v("使用pageContext隐式对象来设置和获取任意作用域的属性")]),t._v(" "),a("li",[a("mark",[t._v("++++++++++++++P312+++++++++++++++++")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("3个指令")])]),t._v(" "),a("ul",[a("li",[a("img",{attrs:{src:"C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220227152207245.png",alt:"image-20220227152207245"}})]),t._v(" "),a("li",[a("img",{attrs:{src:"C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220227152220625.png",alt:"image-20220227152220625"}})]),t._v(" "),a("li",[a("img",{attrs:{src:"C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220227152232094.png",alt:"image-20220227152232094"}})])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("EL表达式")])]),t._v(" "),a("ul",[a("li",[t._v("EL表达式提供一种更加简单的方法来嗲用Java代码，但是代码本身放在别的地方")]),t._v(" "),a("li",[t._v("不会在JSP中编写方法代码，要把Java方法写在别的地方，再用EL来调用")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("如何让我的程序员不再在JSP中使用脚本元素")]),t._v("\n在DD中放置一个"),a("scripting-invalid",[t._v("，就可以让JSP禁用脚本元素（scriptlet，Java表达式，或声明）\n"),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220227152909814.png",alt:"image-20220227152909814"}})])],1)]),t._v(" "),a("li",[a("p",[a("strong",[t._v("忽略EL")]),t._v("\n默认下EL启用。")]),t._v(" "),a("p",[t._v("在DD中放置"),a("el-ignored",[t._v("元素")])],1),t._v(" "),a("p",[t._v("page指令优先级高于DD配置")])]),t._v(" "),a("li",[a("p",[t._v("JSP元素：“"),a("mark",[t._v("动作")]),t._v("”")]),t._v(" "),a("blockquote",[a("p",[t._v("这个部分是后面的重点。")])])]),t._v(" "),a("li",[a("p",[t._v("——")])])]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("——")])]),t._v(" "),a("h2",{attrs:{id:"第八章-没有脚本的页面-无脚本的jsp-el表达式-96页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第八章-没有脚本的页面-无脚本的jsp-el表达式-96页"}},[t._v("#")]),t._v(" 第八章：没有脚本的页面-无脚本的JSP（EL表达式）96页")]),t._v(" "),a("h3",{attrs:{id:"内容-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容-8"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),a("ul",[a("li",[t._v("——")])]),t._v(" "),a("h3",{attrs:{id:"总结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("——")])]),t._v(" "),a("h2",{attrs:{id:"第九章-强大的定制标记-使用jstl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第九章-强大的定制标记-使用jstl"}},[t._v("#")]),t._v(" 第九章：强大的定制标记：使用JSTL")]),t._v(" "),a("h3",{attrs:{id:"内容-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容-9"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("基础")])]),t._v(" "),a("ul",[a("li",[t._v("JSP标准标签库（JSTL）是一个JSP标签集合，它封装了JSP应用的通用核心功能。")]),t._v(" "),a("li",[t._v("JSTL支持通用的、结构化的任务，比如迭代，条件判断，XML文档操作，国际化标签，SQL标签。")]),t._v(" "),a("li",[t._v("除了这些，它还提供了一个框架来使用集成JSTL的自定义标签。")]),t._v(" "),a("li",[t._v("可以分为以下五个类别：核心标签，格式化标签，SQL标签，XML标签，JSTL函数。\n"),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220305192245296.png",alt:"image-20220305192245296"}})]),t._v(" "),a("li",[t._v("参考链接：https://www.runoob.com/jsp/jsp-jstl.html")])])]),t._v(" "),a("li",[a("p",[t._v("<c: out>")]),t._v(" "),a("ul",[a("li",[t._v("用于在JSP中显示数据，就像<%=...>")]),t._v(" "),a("li",[t._v("有个属性设置没有懂")])])]),t._v(" "),a("li",[a("p",[t._v("<c: forEach>")]),t._v(" "),a("ul",[a("li",[t._v("基础迭代标签，接受多种集合类型")]),t._v(" "),a("li",[t._v("这些标签封装了Java中的for，while，do-while循环。")]),t._v(" "),a("li",[t._v("相比而言，<c:forEach>标签是更加通用的标签，因为它迭代一个集合中的对象。")])])]),t._v(" "),a("li",[a("p",[t._v("<c: if>")]),t._v(" "),a("ul",[a("li",[t._v("与我们在一般程序中用的if一样")]),t._v(" "),a("li",[t._v("<c:if>标签判断表达式的值，如果表达式的值为 true 则执行其主体内容。")])])]),t._v(" "),a("li",[a("p",[t._v("<c: choose> 和它的同伴<c: when => <c: otherwise>")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("<c: choose> 本身只当做<c:when>和<c:otherwise>的父标签")])]),t._v(" "),a("li",[a("p",[t._v("<c:choose>标签与Java switch语句的功能一样，用于在众多选项中做出选择。")]),t._v(" "),a("p",[t._v("switch语句中有case，而<c:choose>标签中对应有<c:when>，switch语句中有default，而<c:choose>标签中有<c:otherwise>。")])]),t._v(" "),a("li",[a("p",[t._v("语法格式：")]),t._v(" "),a("div",{staticClass:"language-jsp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<c:choose>\n    <c:when test="<boolean>">\n        ...\n    </c:when>\n    <c:when test="<boolean>">\n        ...\n    </c:when>\n    ...\n    ...\n    <c:otherwise>\n        ...\n    </c:otherwise>\n</c:choose>\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])])])])]),t._v(" "),a("li",[a("p",[t._v("<c: set>")]),t._v(" "),a("ul",[a("li",[t._v("用于保存数据")]),t._v(" "),a("li",[t._v("<c:set>标签用于设置变量值和对象属性。")]),t._v(" "),a("li",[t._v("<c:set>标签就是"),a("a",{attrs:{href:"jsp:setProperty"}},[t._v("jsp:setProperty")]),t._v("行为标签的孪生兄弟。")]),t._v(" "),a("li",[t._v("这个标签之所以很有用呢，是因为它会计算表达式的值，然后使用计算结果来设置 JavaBean 对象或 java.util.Map 对象的值。")]),t._v(" "),a("li",[t._v("这个标签有如下属性：\n"),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220305181211778.png",alt:"image-20220305181211778"}})])])]),t._v(" "),a("li",[a("p",[t._v("<c: remove>")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("用于删除数据")])]),t._v(" "),a("li",[a("p",[t._v("<c:remove>标签用于移除一个变量，可以指定这个变量的作用域，若未指定，则默认为变量第一次出现的作用域。")]),t._v(" "),a("p",[t._v("这个标签不是特别有用，不过可以用来确保JSP完成清理工作。")])])])]),t._v(" "),a("li",[a("p",[t._v("<c: import>")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("检索一个绝对或相对 URL，然后将其内容暴露给页面")])]),t._v(" "),a("li",[a("p",[t._v("以下是几种方法：将一个资源的内容增加到一个JSP中去")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220305182049990.png",alt:"image-20220305182049990"}}),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220305182101586.png",alt:"image-20220305182101586"}}),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220305182133540.png",alt:"image-20220305182133540"}})]),t._v(" "),a("li",[a("p",[t._v("——")])])])]),t._v(" "),a("li",[a("p",[t._v("<c: param>")]),t._v(" "),a("ul",[a("li",[t._v("用来给包含或重定向的页面传递参数")]),t._v(" "),a("li",[t._v("<c:param> 标签用于在 <c:url> 标签中指定参数，而且与 URL 编码相关。")]),t._v(" "),a("li",[t._v("在 <c:param> 标签内，name 属性表明参数的名称，value 属性表明参数的值。")])])]),t._v(" "),a("li",[a("p",[t._v("<c: url>")]),t._v(" "),a("ul",[a("li",[t._v("使用可选的查询参数来创造一个URL")]),t._v(" "),a("li",[t._v("自动完成url编码")]),t._v(" "),a("li",[t._v("配合<c: param>完成url重写")])])]),t._v(" "),a("li",[a("p",[t._v("定制错误页面")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("errorPage指令\n"),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220305184510988.png",alt:"image-20220305184510988"}})])]),t._v(" "),a("li",[a("error-page",[t._v("DD标记\n")])],1),t._v(" "),a("li",[a("p",[t._v("容器使用DD中的"),a("error-page",[t._v("配置作为默认错误页面，但是如果JSP中有一个明确的errorPage指令，容器就会优先使用指令。")])],1)]),t._v(" "),a("li",[a("p",[t._v("DD中配置错误页面")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220305184721868.png",alt:"image-20220305184721868"}}),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220305184803073.png",alt:"image-20220305184803073"}}),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220305184817634.png",alt:"image-20220305184817634"}}),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220305184832514.png",alt:"image-20220305184832514"}})]),t._v(" "),a("li",[a("p",[t._v("错误页面实际上就是一个处理异常的JSP。所以容器为这个页面提供了一个额外的exception对象。可以得到这个异常。可以使用隐式对象exception。")])])])]),t._v(" "),a("li",[a("p",[t._v("<c: catch>")]),t._v(" "),a("ul",[a("li",[t._v("用来处理产生错误的异常状况，并且将错误信息储存起来")]),t._v(" "),a("li",[t._v("可以使用标记完成一种try/catch，把有风险的标记或者表达式包起来。")]),t._v(" "),a("li",[t._v("只有正式指定的错误页面才能得到隐式异常对象，其他的页面得不到异常。如下就不行：\n"),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220305191533061.png",alt:"image-20220305191533061"}})]),t._v(" "),a("li",[t._v("若想在<c: catch>标记结束之后访问异常，可以使用可选的var属性，它会把异常对象放在页面作用域。\n"),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220305191722753.png",alt:"image-20220305191722753"}})])])]),t._v(" "),a("li",[a("p",[t._v("_"),a("mark",[t._v("++++++++++++++++待补充+++++++++++++++++")])])])]),t._v(" "),a("h3",{attrs:{id:"总结-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-3"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("——")])]),t._v(" "),a("center",[a("mark",[t._v("-----------------------------------------------分割线------------------------------------------------")])]),t._v(" "),a("h2",{attrs:{id:"第十一章-部署web应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十一章-部署web应用"}},[t._v("#")]),t._v(" 第十一章：部署Web应用")]),t._v(" "),a("h3",{attrs:{id:"内容-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容-10"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),a("ul",[a("li",[t._v("——")])]),t._v(" "),a("h3",{attrs:{id:"总结-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-4"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("——")])]),t._v(" "),a("h2",{attrs:{id:"第十二章-web应用安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十二章-web应用安全"}},[t._v("#")]),t._v(" 第十二章：Web应用安全")]),t._v(" "),a("h3",{attrs:{id:"内容-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容-11"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),a("ul",[a("li",[t._v("——")])]),t._v(" "),a("h3",{attrs:{id:"总结-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-5"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("——")])]),t._v(" "),a("center",[a("mark",[t._v("-----------------------------------------------分割线------------------------------------------------")])]),t._v(" "),a("h2",{attrs:{id:"第十三章-过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十三章-过滤器"}},[t._v("#")]),t._v(" 第十三章：过滤器")]),t._v(" "),a("h3",{attrs:{id:"内容-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容-12"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("内容大纲")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220307180405624.png",alt:"image-20220307180405624"}})]),t._v(" "),a("li",[a("p",[t._v("servlet安全中的4大要素：")]),t._v(" "),a("ul",[a("li",[t._v("认证（抵挡假冒者）")]),t._v(" "),a("li",[t._v("授权（抵挡非法升级者）")]),t._v(" "),a("li",[t._v("机密性（抵挡窃听者）")]),t._v(" "),a("li",[t._v("数据完整性（抵挡窃听者）")])])]),t._v(" "),a("li",[a("p",[t._v("HTTP世界中如何认证")]),t._v(" "),a("ul",[a("li")])]),t._v(" "),a("li",[a("p",[t._v("授权")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("第一步：定义角色。即把开发商特定的”用户“文件中的角色映射到部署描述文件中建立的角色。")])]),t._v(" "),a("li",[a("p",[t._v("第二步：定义资源/方法约束。以声明的方式指定一个给定的资源/方法组合，只能由特定角色的用户访问。\n"),a("web-resourse-collection",[t._v("子元素的作用是告诉容器哪些资源和HTTP方法组合要以某种方式受约束，即只能由相应"),a("auto-constraint",[t._v("标记中的角色访问。")])],1)],1),t._v(" "),a("p",[a("mark",[t._v("这里的配置地方用到可查，先了解这个概念")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220307182815829.png",alt:"image-20220307182815829"}})])])])]),t._v(" "),a("li",[a("p",[t._v("在HttpServletRequest()中，有3个方法与程序式安全有关：")]),t._v(" "),a("ul",[a("li",[t._v("getUserPrincipal()")]),t._v(" "),a("li",[t._v("getRemoteUser()")]),t._v(" "),a("li",[t._v("isUserInRole()：意思是不在HTTP方法层次（GET，POST等）上完成授权，而是对方法中的某些部分建立访问授权")])]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220307184251343.png",alt:"image-20220307184251343"}}),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220307184335428.png",alt:"image-20220307184335428"}})]),t._v(" "),a("li",[a("p",[t._v("——")])])]),t._v(" "),a("h3",{attrs:{id:"总结-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-6"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("——")])]),t._v(" "),a("h2",{attrs:{id:"第十四章-企业设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十四章-企业设计模式"}},[t._v("#")]),t._v(" 第十四章 企业设计模式")]),t._v(" "),a("h3",{attrs:{id:"内容-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容-13"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("J2EE特有的设计模式以及其他设计模式，可以大大简化你的代码，你也能更轻松。Web应用最重要的设计模式是MVC，对此甚至还有一个相当流行的框架Struts。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("J2EE是什么")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("参考链接：https://blog.csdn.net/qq_32575047/article/details/79039408")])]),t._v(" "),a("li",[a("p",[t._v("我们先学习了Java的语法，Jvm运行，然后要编程的时候就用J2SE的标准库来实现业务需求。到这一步呢，你想干啥都能用J2SE的类库来实现，进程，线程，网络，IO，UI等等。")]),t._v(" "),a("p",[t._v("但进一步地，如果你想写个Web应用呢，你得实现HTTP Server, "),a("a",{attrs:{href:"https://www.zhihu.com/search?q=%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A314752560%7D",target:"_blank",rel:"noopener noreferrer"}},[t._v("业务逻辑"),a("OutboundLink")],1),t._v(",数据访问/缓存/持久化等等很多组件，以及处理各组件之间的通信，部署架构等等很多事情。")]),t._v(" "),a("p",[t._v("为了避免每次都重复实现这些流程和组件，就会自然演化出框架以及架构。")]),t._v(" "),a("p",[t._v("Java的大佬们不仅提供了框架，还大致约定了Web应用的整体架构。而且把这方面的需求做了一系列的规范，这就是J2EE了。")]),t._v(" "),a("p",[t._v("大致分为Web Container和EJB Container，以及运行于容器中的各种组件，比如Servlet。规范只提供了整体架构，流程以及API，由各家自己去实现这些规范，比如Tomcat实现Web Container以及其API。")]),t._v(" "),a("p",[t._v("所以总结起来就是J2EE就是Java平台的Web开发相关的一系列规范，Sun/Oracle/IBM/Redhat等公司各自提供了J2EE规范的实现，我们在用Java进行Web开发时一般会用到其中的一个或多个实现。相应地，我们自己写的代码也是遵循了J2EE规范。")])])])])]),t._v(" "),a("li",[a("p",[t._v("Struts是以前MVC web应用最为常用的框架，现在已经过时了。")])]),t._v(" "),a("li")]),t._v(" "),a("h3",{attrs:{id:"总结-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-7"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("——")])])],1)}),[],!1,null,null,null);e.default=v.exports}}]);