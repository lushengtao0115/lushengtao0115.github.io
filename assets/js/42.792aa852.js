(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{651:function(v,_,a){"use strict";a.r(_);var l=a(7),t=Object(l.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[v._v("从今天开启Java多线程的学习生活，需要确定学习形式。")])]),v._v(" "),a("h2",{attrs:{id:"学习方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#学习方式"}},[v._v("#")]),v._v(" 学习方式")]),v._v(" "),a("p",[v._v("Java多线程基础+java并发编程进阶")]),v._v(" "),a("ul",[a("li",[v._v("首先复习整理基础部分")]),v._v(" "),a("li",[v._v("接着刷**《狂神视频》**，注意这里面的重难点")]),v._v(" "),a("li",[v._v("主要刷一本书，辅助一本书：主要**《Java并发编程之美》**+ 辅助《Java并发编程的艺术》+《Java并发编程实战》")]),v._v(" "),a("li",[v._v("平时没事情可以刷一些总结经验帖子，修正自己学习方式，做好规划总结")]),v._v(" "),a("li",[v._v("另外，专门查询资料补充技术点。")]),v._v(" "),a("li",[v._v("以面试经验为导向：面试引导学习，看清楚路")]),v._v(" "),a("li",[v._v("源码可能是重点")])]),v._v(" "),a("p",[v._v("这是一个积累的过程，拉长战线，注意复习整理。")]),v._v(" "),a("h2",{attrs:{id:"java并发编程有哪些内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java并发编程有哪些内容"}},[v._v("#")]),v._v(" Java并发编程有哪些内容")]),v._v(" "),a("p",[v._v("​\t\t首先全局的了解并发的知识体系，同时了解并发理论基础和线程基础，并发关键字等，这些是你理解Java并发框架的基础。")]),v._v(" "),a("p",[v._v("​\t\t接下来就大致浏览相关内容，且整理出来一些脉络，作为初步印象。")]),v._v(" "),a("ul",[a("li",[a("strong",[v._v("为什么需要多线程")])]),v._v(" "),a("li",[a("strong",[v._v("并发问题出现的根源")]),v._v("：并发的三要素——可见性（一个线程对共享变量的修改，另外一个线程能够立刻看到。这是由CPU缓存引起的）；原子性（即一个操作或者多个操作要么全部执行，并且执行的过程不会被任何因素打断，要么就都不执行。这是由于分时复用引起的）；有序性（即程序执行的顺序按照代码的先后顺序执行。这是由重排序引起的）。")]),v._v(" "),a("li",[a("strong",[v._v("Java是如何解决并发问题的")]),v._v("：（JMM即Java内存模型）。\n"),a("ul",[a("li",[v._v("JMM规范了JVM如何提供按需禁用和编译优化的方法：volatile，synchronized和final三个关键字；happens-before规则")]),v._v(" "),a("li",[v._v("可见性，有序性，原子性（注意和上面提供的一个对应）")])])]),v._v(" "),a("li",[a("strong",[v._v("关键字volatile，synchronized和final")])]),v._v(" "),a("li",[a("strong",[v._v("happens-before规则")]),v._v(" "),a("ul",[a("li",[v._v("单一线程规则")]),v._v(" "),a("li",[v._v("管程锁定规则")]),v._v(" "),a("li",[v._v("volatile变量规则")]),v._v(" "),a("li",[v._v("线程启动规则")]),v._v(" "),a("li",[v._v("线程加入规则")]),v._v(" "),a("li",[v._v("线程中断规则")]),v._v(" "),a("li",[v._v("对象终结规则")]),v._v(" "),a("li",[v._v("传递性")])])]),v._v(" "),a("li",[a("strong",[v._v("线程安全")])]),v._v(" "),a("li",[a("strong",[v._v("线程安全的实现方法")]),v._v(" "),a("ul",[a("li",[v._v("互斥同步：synchronized和reentrantlock")]),v._v(" "),a("li",[v._v("非阻塞同步：CAS，AtomicInteger，ABA")]),v._v(" "),a("li",[v._v("无同步方案")])])])]),v._v(" "),a("p",[a("mark",[v._v("上述内容为理论基础")]),v._v("，即对应了线程基础，即Java中一些具体的实现：关键字，JUC锁，JUC集合，JUC工具类等等。")])])}),[],!1,null,null,null);_.default=t.exports}}]);