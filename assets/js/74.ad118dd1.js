(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{684:function(a,t,s){"use strict";s.r(t);var r=s(7),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[a._v("这是第二次整理，本次整理主要是面向对象部分。整理出框架，复习。")]),a._v(" "),s("p",[a._v("此后的整理，主要阅读《Java核心技术卷》，整理出框架体系。")])]),a._v(" "),s("blockquote",[s("p",[a._v("主要参考内容是《Java核心技术卷一》的第4章-第6章(p108-p280)")])]),a._v(" "),s("h2",{attrs:{id:"随记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#随记"}},[a._v("#")]),a._v(" 随记")]),a._v(" "),s("ul",[s("li",[a._v("没懂1\n"),s("img",{attrs:{src:"C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220201072257636.png",alt:"image-20220201072257636"}})]),a._v(" "),s("li",[a._v("没懂2（P153）\n"),s("img",{attrs:{src:"C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220201080338369.png",alt:""}})]),a._v(" "),s("li",[a._v("没懂3（静态绑定）（p173）\n"),s("img",{attrs:{src:"C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220201204550135.png",alt:"image-20220201204550135"}})]),a._v(" "),s("li",[a._v("需要弄清楚4（引用类型）（p183）")])]),a._v(" "),s("p",[s("img",{attrs:{src:"C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220202005625309.png",alt:"image-20220202005625309"}})]),a._v(" "),s("ul",[s("li",[s("p",[a._v("泛型数组列表")]),a._v(" "),s("ul",[s("li",[a._v("在Java中，允许在运行时确定数组的大小。")]),a._v(" "),s("li",[a._v("但是没有完全解决运行时动态更改数组的问题。一旦确定了数组的大小，改变他就不容易。")]),a._v(" "),s("li",[a._v("在java中，解决这个问题最简单的方法是使用Java中的ArrayList类。")]),a._v(" "),s("li",[a._v("ArrayList类\n"),s("ul",[s("li",[a._v("这个类使用起来有点像数组 ， 但在添加或删除元素时 ， 具有自动调节数组容量的\n功能，而不需要为此编写任何代码 。")]),a._v(" "),s("li",[a._v("ArrayList 是一个采用类型参数 （ type parameter ) 的泛型类 （ generic class )")]),a._v(" "),s("li",[a._v("ArrayList< Employee >可以指定数组列表保存的元素对象类型")]),a._v(" "),s("li",[a._v("数组自动列表自动扩展容量，基于某种机制"),s("img",{attrs:{src:"C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220202014245089.png",alt:"image-20220202014245089"}}),s("img",{attrs:{src:"C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220202014822924.png",alt:"image-20220202014822924"}})])])])])]),a._v(" "),s("li",[s("p",[a._v("没懂（p229）\n"),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220202025850617.png",alt:"image-20220202025850617"}})])]),a._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://blog.csdn.net/limenghua9112/article/details/8983240",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java中的域，实例域，静态域"),s("OutboundLink")],1),a._v("：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("所谓的域，翻译成英文就是****field*"),s("em",[s("strong",[a._v("， 也就是我们常说的")]),a._v("字段")]),a._v("*，或者说是****属性****。 比如类的字段（属性），局部的，全局的。"),s("strong",[a._v("所谓域，其实是“field”的翻译")])])]),a._v(" "),s("li",[s("p",[a._v('然后实例域，就是 实例("object" )的"field"。　java中'),s("strong",[a._v("对象中的数据")]),a._v("称为实例域（instance field）。")])]),a._v(" "),s("li",[s("p",[a._v("静态域又叫类域，如果将域定义为static，那么每个类中只有一个这样的域。而每一个对象对于所有的实例域却都有自己的一份拷贝。")])]),a._v(" "),s("li",[s("p",[s("mark",[a._v("例子")]),a._v("：这里给Employee类添加一个实例域id和一个静态域nextld。现在，每一个雇员对象都有一个自己的id域，但这个类的所有实例将共享一个nextid域，换句话说，如果有1000个Employee类的对象，则有1000个实例域id，但是只有一个静态域nextid，即使没有一个雇员对象，静态域nextil也存在，他属于类，而不属于任何独立的对象。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Employee")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//实例域")]),a._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" nextId"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("； "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//静态域")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])])]),a._v(" "),s("li",[s("p",[a._v("——")])])])]),a._v(" "),s("li",[s("p",[a._v("_")])])]),a._v(" "),s("h1",{attrs:{id:"整理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整理"}},[a._v("#")]),a._v(" 整理")]),a._v(" "),s("h2",{attrs:{id:"第4章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第4章"}},[a._v("#")]),a._v(" <第4章>")]),a._v(" "),s("ul",[s("li",[a._v("_")])]),a._v(" "),s("h2",{attrs:{id:"第5章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第5章"}},[a._v("#")]),a._v(" <第5章>")]),a._v(" "),s("ul",[s("li",[a._v("_")])]),a._v(" "),s("h2",{attrs:{id:"第6章-接口、lambda表达式、内部类、代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第6章-接口、lambda表达式、内部类、代理"}},[a._v("#")]),a._v(" <第6章 接口、lambda表达式、内部类、代理>")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("基本介绍")]),a._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220202022920755.png",alt:"image-20220202022920755"}})]),a._v(" "),s("li",[s("p",[a._v("接口\n"),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220202025127511.png",alt:"image-20220202025127511"}})])]),a._v(" "),s("li",[s("p",[a._v("lambda表达式\n"),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220202025153735.png",alt:"image-20220202025153735"}})])]),a._v(" "),s("li",[s("p",[a._v("内部类\n"),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220202025213291.png",alt:"image-20220202025213291"}})])]),a._v(" "),s("li",[s("p",[a._v("代理\n"),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220202025232627.png",alt:"image-20220202025232627"}})])]),a._v(" "),s("li",[s("p",[a._v("接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。")])]),a._v(" "),s("li",[s("p",[s("mark",[a._v("接口不能含有实例域")]),a._v("。提供实例域和方法实现的任务应该由实现接口的那个类来完成。可以将接口看成是没有实例域的抽象类。")])]),a._v(" "),s("li",[s("p",[a._v("在接口声明中，接口中的所有方法都自动地是public，因此不必声明为public。不过，在实现接口时，必须把方法声明为public。")])]),a._v(" "),s("li",[s("p",[a._v("如同使用 instanceof 检查一个对象是否属于某个特定类一样 ， 也可以使用instance 检查一个对象是否实现了某个特定的接口")])]),a._v(" "),s("li",[s("p",[s("mark",[a._v("？？？")]),a._v("在接口中不能包含实例域或者"),s("mark",[a._v("静态方法")]),a._v("。但是可以包含常量。接口中的方法都被自动地设置为public，"),s("mark",[a._v("接口中的域将自动地被设置为public static final")]),a._v("。")])]),a._v(" "),s("li",[s("p",[s("mark",[a._v("如何解释")]),a._v("接口可以提供多重继承的大多数好处，同时还能避免多重继承的复杂性和低效性。")])]),a._v(" "),s("li",[s("p",[s("mark",[a._v("接口静态方法？")]),a._v("(p235)\n"),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220202041843389.png",alt:"image-20220202041843389"}})])]),a._v(" "),s("li",[s("p",[a._v("接口提供默认方法，必须使用default'修饰符，如果不想实现这个方法，就可以不实现，只需要关注自己想实现的即可。\n"),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220202042443973.png",alt:"image-20220202042443973"}})])]),a._v(" "),s("li",[s("p",[a._v("接口默认方法冲突：\n如果先在一个接口中将一个方法定义为默认方法，然后又在超类或者另一个接口中定义了同样的方法，那么Java的规则：")]),a._v(" "),s("ol",[s("li",[a._v("超类优先")]),a._v(" "),s("li",[a._v("接口冲突：如果类继承了两个接口，都有某个方法例如getName()，如果有一个及其以上的默认实现，Java编译器都会报告一个错误，让程序员来决定如何处理。如下所示，可以自己实现，也可以选取冲突方法中的一个。\n"),s("img",{attrs:{src:"C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220202044758315.png",alt:"image-20220202044758315"}})])])]),a._v(" "),s("li",[s("p",[a._v("接口示例")]),a._v(" "),s("ul",[s("li",[s("mark",[a._v("=======================待补充==============================")])])])]),a._v(" "),s("li",[s("p",[a._v("lambda表达式")]),a._v(" "),s("ul",[s("li",[s("mark",[a._v("=======================待补充==============================")])])])]),a._v(" "),s("li",[s("p",[a._v("内部类")]),a._v(" "),s("ul",[s("li",[s("mark",[a._v("=======================待补充==============================")])])])]),a._v(" "),s("li",[s("p",[a._v("代理")]),a._v(" "),s("ul",[s("li",[s("mark",[a._v("=======================待补充==============================")])])])])]),a._v(" "),s("h2",{attrs:{id:"后续安排"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#后续安排"}},[a._v("#")]),a._v(" 后续安排")]),a._v(" "),s("p",[a._v("(三)基础部分、异常处理")]),a._v(" "),s("p",[a._v("(四)集合")]),a._v(" "),s("p",[a._v("(五)泛型、反射、注解")]),a._v(" "),s("p",[a._v("(六)网络编程，IO流")]),a._v(" "),s("p",[a._v("(七)面试题-Java")])])}),[],!1,null,null,null);t.default=e.exports}}]);